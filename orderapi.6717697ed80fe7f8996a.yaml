openapi: 3.0.1
info:
  title: Ninja Van API
  version: 4.1.0
  description: |+

    # Introduction
    Ninja Van is a tech-enabled express delivery company providing hassle-free delivery services for businesses of all sizes across Southeast Asia. 
    This portal provides technical guidance on how to get started with and use Ninja Van APIs for your business scenarios.

    The portal provides documentation for the following APIs and services:
    * [Order API](#tag/Order-API). Create delivery orders, generate waybills, and cancel orders.
    * [Tariff API](#tag/Tariff-API). Get a delivery fee estimate for an order.
    * [PUDO API](#tag/PUDO-API). Embed address selection information for Ninja Points into your e-commerce website.
    * [PUDO partners API](#tag/PUDO-partners-API). As a PUDO partner, use this API to trigger parcel collection and drop-off, and receive updates on the success of operational processes at your Ninja Points.
    * [Webhooks](#tag/Webhooks-V2). Receive updates on successful changes in the lifespan of an order.

    All Ninja Van APIs are RESTful APIs.

    ## Integration process
    1. You (shipper) inform us (Ninja Van) that you would like to integrate with our APIs.
    2. You and your Account Manager settle the commercial agreements.
    3. Your Account Manager creates your Ninja Dashboard account in both sandbox and production environment, and sends you an on-boarding email.
    4. You generate client credentials—Client ID and Client Key—for both sandbox and production accounts.
    5. Your Account Manager initiates the integration audit request for order create and/or waybill.
    6. For each integration, you receive two emails: one to inform you that the integration audit request has been initiated and another containing the instructions and audit link.
    7. To access the production APIs, you need to build the integration on your end and pass the audit.
    8. You may test the integration in our sandbox environment.
    9. Once you have completed the integration, proceed to the audit link where you are required to generate test orders according to predefined scenarios and submit them for verification. 
    10. You receive an audit verification email indicating success or failure. In case of failure, the email provides details on the failure and expectations.
    11. Upon successful audit verification, our developer support team will review the result and grant access to the respective API in production if no further clarification is required.
    12. After receiving the audit grant email, you can start using the API in production.

    For account-related issues, please contact your Account Manager. 
    For technical issues related to API integration, send an email to [developer support](#section/Introduction/Contact-information).

    ### Shippers operating in multiple countries
    For shippers operating in multiple countries, the audit process needs to be initiated by the Account Manager and has to be done separately for each country of operation.

    ### Shippers with multiple accounts for the same shipper
    For shippers who plan to have multiple accounts for the same shipper in the Ninja Van platform, we advise you to enroll as a marketplace shipper. 
    Otherwise, your request to access production APIs with several accounts of the same shipper may be rejected after submission.

    ## Authentication
    Ninja Van APIs use the OAuth 2.0 protocol for authentication and authorization.

    To begin, obtain OAuth 2.0 client credentials from the developer settings in your Ninja Dashboard account. 
    Then use your client app to request an access token, extract the token from the response, and send it to a Ninja Van API that you want to access.

    However, Ninja Van APIs in the sandbox environment and production environment require different access tokens. 
    The reason for is that the Ninja Dashboard accounts in the two environments are different, and they use different credentials.

    This means that you need to use the sandbox access token for testing your API requests and submitting sample orders for an integration audit. 
    Once we grant you access to production, you'll need to generate a new access token in your production Dashboard account.

    ### Client credentials
    The credentials are available in your Ninja Dashboard account, under **Settings > IT Settings**.
    For more information, see [Get access to sandbox](#section/Get-started/Get-access-to-sandbox) and [Get access to production](#section/Get-started/Get-access-to-production).

    ### Access token lifetime
    Access tokens have limited lifetimes. Five minutes before your access token expires, or if a request to a Ninja Van API returns an HTTP `401` status code, generate a new access token.    

    ## Integration requirements

    ### OAuth API
    [OAuth 2.0 token](#tag/OAuth-API/paths/~1{countryCode}~12.0~1oauth~1access_token/post) endpoint:
    * You MUST cache the access token and its expiration timestamp.

    ### Order API
    [Order creation](#tag/Order-API/paths/~1{countryCode}~14.2~1orders/post) and [order cancellation](#tag/Order-API/paths/~1{countryCode}~12.2~1orders~1{trackingNo}/delete) endpoints:
    * If the API returns an HTTP `5xx` status code, you SHOULD retry an order creation request.
    * If the API returns an HTTP `4xx` status code, you SHOULD log the response for debugging.
    * You SHOULD NOT retry the same order creation request without fixing the error specified in the response.

    [Waybill generation](#tag/Order-API/paths/~1{countryCode}~12.0~1reports~1waybill/get) endpoint:

    You MUST cache the waybill upon generation and avoid excessive calls to this endpoint.

    ## Base URL by environment
    ### Production base URL
    * URL: `https://api.ninjavan.co`
    * URL with country code: `https://api.ninjavan.co/{countryCode}`

    ### Production base URL (China)
    This should be used in China instead of the original URL.
    * URL: `https://api.ninjavan.cn`
    * URL with country code: `https://api.ninjavan.cn/{countryCode}`

    ### Sandbox base URL
    * URL: `https://api-sandbox.ninjavan.co`
    * URL with country code: `https://api-sandbox.ninjavan.co/sg`

    **Note:** Always send your sandbox requests to the Singapore sandbox API. However, you can send localized addresses for the countries that you are testing for. In other words, you can craft the API request as you would for the production environment. The only difference is the URL.

    ## Rate limits
    In order to provide a high quality of service for all customers, our API is rate-limited. 
    If you exceed the rate limit, the API responds with an HTTP `429 API rate limit exceeded` status code, and you get temporarily blocked from accessing the API.
    In this case, retry your request after a few hours.

    The following endpoints are rate-limited:

    * OAuth API: [Request access token](#tag/OAuth-API/paths/~1{countryCode}~12.0~1oauth~1access_token/post)
    * Order API: [Generate waybill](#tag/Order-API/paths/~1{countryCode}~12.0~1reports~1waybill/get)
    * Tariff API: [Get price estimate](#tag/Tariff-API/paths/~1{countryCode}~11.0~1public~1price/post). The limit is 20 calls per minute.

    ## Contact information
    To contact the developer support team, send an email to the address that corresponds to your country:

    * Indonesia: [id-devsupport@ninjavan.co](mailto:id-devsupport@ninjavan.co)
    * Malaysia: [my-devsupport@ninjavan.co](mailto:my-devsupport@ninjavan.co)
    * Philippines: [ph-devsupport@ninjavan.co](mailto:ph-devsupport@ninjavan.co)
    * Singapore: [sg-devsupport@ninjavan.co](mailto:sg-devsupport@ninjavan.co)
    * Thailand: [th-devsupport@ninjavan.co](mailto:th-devsupport@ninjavan.co)
    * Vietnam: [vn-devsupport@ninjavan.co](mailto:vn-devsupport@ninjavan.co)
    * China office: [cn-devsupport@ninjavan.co](mailto:cn-devsupport@ninjavan.co)

    # Get started

    ## Get access to sandbox
    To build your workflow and test our APIs, you need to have access to the sandbox environment.

    **Note:** All sandbox requests must be sent to the Singapore sandbox API: `https://api-sandbox.ninjavan.co/sg`.

    ### Prerequisites
    * Ninja Van Postpaid Pro account.
    * Access to Ninja Dashboard.

    ### Steps
    1. Open [Ninja Dashboard](https://dashboard-sandbox.ninjavan.co/login-v2) in sandbox.
    2. Enter your email and password, and click **Login**.
    3. Go to **Settings > IT Settings**.
    4. Click **REGENERATE CLIENT ID & KEY**. Your credentials appear under **Client ID** and **Client Key**, respectively.
    5. Pass the credentials to the [OAuth API](#tag/OAuth-API/paths/~1{countryCode}~12.0~1oauth~1access_token/post) to get your access token.

    Use this token for testing your requests to Ninja Van APIs in the sandbox environment. This guide provides [sample parameters and payloads](#section/Sample-order-creation-requests) for various business scenarios.

    ## Review your integration
    Before granting you access to production, Ninja Van needs to do an audit of your integration. Take these steps to get started:
    1. In the sandbox environment, create at least three test orders following the predefined test scenarios, with accurate address and other information. 
    These requests must be sent via the integration that you built, and not via Postman or any other API testing tool.
    2. Submit the test orders via the audit link.

    The Ninja Van developer support team will review your requests, and if they meet our requirements, then you'll be granted access to the Order API in production. 

    **Note:** Successful completion of the integration audit doesn't automatically grant you the permission to use the waybill generation endpoint. To request access to this endpoint, see [How to request access](#tag/Order-API/paths/~1{countryCode}~12.0~1reports~1waybill/get).

    ### Shippers operating in multiple countries
    For shippers operating in multiple countries, the audit process needs to be initiated by the Account Manager and has to be done separately for each country of operation.

    ## Get access to production
    The access token that you used before you were granted access to production, will not work. This is why you need to generate a new token to access the production APIs.

    ### Prerequisites
    * Ninja Van Postpaid Pro account.
    * Access to Ninja Dashboard.

    ### Steps
    1. Open [Ninja Dashboard](https://dashboard.ninjavan.co/login-v2) in production.
    2. Enter your email and password, and click **Login**.
    3. Go to **Settings > IT Settings**.
    4. Click **REGENERATE CLIENT ID & KEY**. Your credentials appear under **Client ID** and **Client Key**, respectively.
    5. Pass the credentials to the [OAuth API](#tag/OAuth-API/paths/~1{countryCode}~12.0~1oauth~1access_token/post) to get your access token.

    Use this token to authenticate your requests to our APIs in the production environment.

  x-logo:
    url: "https://images.ctfassets.net/iu7xhxelvu8m/6LC1QNfA1NyDGfp8sBN0gK/ef728c17096218198e06e1a3d990804b/nv-logo-top-sg.svg"
    backgroundColor: "#ffffff"
    altText: Ninja Van
servers:
  - url: "https://api-sandbox.ninjavan.co"
    description: Sandbox server
  - url: "https://api-sandbox.ninjavan.cn"
    description: Sandbox server (China)
  - url: "https://api.ninjavan.co"
    description: Production server
  - url: "https://api.ninjavan.cn"
    description: Production server (China)
tags:
  - name: OAuth API
    description: The purpose of the OAuth API is to generate an access token for the sandbox and production environments.

  - name: Order API
    description: The purpose of the Order API is to create delivery orders, generate waybills, and cancel orders.

  - name: Tariff API
    description: |+
      The purpose of the Tariff API is to provide a delivery fee estimate for an order.

      **Note:** This API is only available for Indonesia.

  - name: PUDO API
    description: |+
      The purpose of the PUDO API is to provide address selection information for Ninja Points that you can embed into your e-commerce website. 
      This way, your customers can collect their parcels from our extensive network of Ninja Points—Ninja Van's partner retail shops and partner automated parcel lockers strategically located in populous and urban areas with high footfall.

      In addition to parcel collection, customers can use Ninja Points to drop-off their return parcels.

      For more information about Ninja Points, visit the [Ninja Points website](https://www.ninjavan.co/en-sg/ninja-points).

      ## How to use the PUDO API
      1. Make sure that you can properly load the list of addresses from https://api.ninjavan.co/sg/2.0/pudos in JSON format. 
      2. At your site's address entry page, provide another component that enables selection of Ninja Point locations.
      3. After the form retrieves the address, input it into the order in a way that is specific to your system.   

  - name: PUDO partners API
    description: |+
      The PUDO partners API is used to trigger operational processes at external Ninja Points managed by Ninja Van's partners. 

  - name: Webhooks V2
    description: |+

      A webhook is a tool for retrieving and storing data from certain events. Ninja Van sends webhooks upon successful status changes in the lifespan of an order.
      This section covers the key information that you need to receive webhooks from the Ninja Van platform. This is the newer version of the existing webhooks system.

      The webhooks are sent over HTTP POST to the subscribed endpoint.

      When handling webhooks, we recommend accepting the request immediately and processing it asynchronously in the background to improve your API’s performance.

      **Note on Webhook Delivery:**
      Webhooks may not always be delivered in natural order. We employ a retry mechanism for failed webhook deliveries, which attempts to resend the webhook over a period of up to 2 days.

      **Timestamp Format:** 
      Please be aware that the timestamp field in the payload is provided in ISO 8601 format (example "2006-01-02T15:04:05-0700"). This timestamp includes timezone information, so the timezone should be parsed directly from the timestamp itself rather than assuming a default.
      This is particularly important for international orders, where events may be transmitted across different timezones.

      # Webhook events

      We recommend subscribing to at least Pending Pickup webhook and all terminal status webhooks to ensure a seamless customer experience.
        | Event                                          | Terminal status?    | Webhook is triggered when... |
        |------------------------------------------------|---------------------|------------------------------|
        | Pending Pickup                                                         |  NO      | Order creation is fully processed in our system, and the order is waiting to be picked up. |
        | Driver dispatched for Pickup                                           |  NO      | Driver is dispatched towards pickup point. |
        | Picked Up, In Transit to Origin Hub                                    |  NO      | Order is picked up and is on the way to a sorting hub. |
        | Pending Pickup, Shipper Dropoff                                        |  NO      | Order has been received at a Ninja Point and is waiting to be picked up. |
        | Pickup Exception, Pending Reschedule                                   |  NO      | Driver isn't able to pick up the parcel. The order's waiting for a pickup to be rescheduled. |
        | Pickup Exception, Reattempt Scheduled                                  |  NO      | Driver isn't able to pick up the parcel. The order's pickup has been rescheduled. |
        | Pickup Exception, Max Attempts Reached                                 |  YES     | Driver isn't able to pick up the parcel and the order has reached max pickup attempts. |
        | Pickup Exception, Pending Retrieval from PUDO                          |  NO      | Driver isn't able to pick up the parcel from pudo point. |
        | Arrived at Origin Hub                                                  |  NO      | Order arrives at an origin hub for further processing. |
        | Arrived at Transit Hub                                                 |  NO      | Order arrives at an transit hub for further processing. |
        | Arrived at Destination Hub                                             |  NO      | Order arrives at an destination hub for further processing. |
        | In Transit to Next Sorting Hub                                         |  NO      | Order is moving between from one hub to another. |
        | On Vehicle for Delivery                                                |  NO      | Driver picks up the parcel from a sorting hub for delivery. |
        | At PUDO, Pending Customer Collection                                   |  NO      | Driver delivered the parcel to pudo point. |
        | Parcel Measurements Update                                             |  NO      | Parcel measurements updated in system. |
        | Delivered, Collected by Customer                                       |  YES     | Customer has picked up the parcel from pudo point. |
        | Delivered, Left at Doorstep                                            |  YES     | Driver marks the parcel as delivered after leaving parcel at customer's doorstep. |
        | Delivered, Received by Customer                                        |  YES     | Driver marks the parcel as delivered after handing over to customer. |
        | Delivery Exception, Pending Reschedule                                 |  NO      | Driver marks the order as delivery failed, and the order is waiting to be rescheduled. |
        | Delivery Exception, Reattempt Scheduled                                |  NO      | Driver marks the order as delivery failed, and the order has been rescheduled. |
        | Delivery Exception, Max Attempts Reached                               |  NO      | Driver marks the order as delivery failed, and the order has reached max delivery attempts. |
        | Delivery Exception, Parcel Overstayed at PUDO                          |  NO      | Parcel was delivered to PUDO point but was not collected by customer |
        | Delivery Exception, Parcel Lost                                        |  NO      | Parcel has been lost. |
        | Delivery Exception, Parcel Damaged                                     |  NO      | Parcel has been damaged. |
        | Delivery Exception, Return to Sender Initiated                         |  NO      | After repeated failed deliveries, Ninja Van initiates the return flow for the order. |
        | Returned to Sender                                                     |  YES     | After repeated failed deliveries, the order is sent back to the sender. |
        | Cancelled                                                              |  YES     | Order is cancelled successfully. |
        | Return to Shipper Exception, Parcel triggered for Shipper Collection   |  NO      | Return to shipper failed, Shipper should collect parcel. |
        | Return to Shipper Exception, Parcel collected by Shipper               |  NO      | Return to shipper failed, Shipper has collected parcel. |
        | Return to Shipper Exception, Parcel Scrapped                           |  NO      | Return to shipper failed, parcel has been scrapped. |
        | Return to Shipper Exception, Max Attempts Reached                      |  NO      | Return to shipper failed, and parcel has reached max rts attempts. |
        | International Transit, Handed Over to Origin Facility                  |  NO      | Cross-border - handed over to origin facility |
        | International Transit, Arrived at Origin Facility                      |  NO      | Cross-border - arrived at origin facility |
        | International Transit, Processed at Origin Facility                    |  NO      | Cross-border - processed at origin facility |
        | International Transit, Handed Over to Linehaul                         |  NO      | Cross-border - handed over to linehaul |
        | International Transit, Export Cleared                                  |  NO      | Cross-border - export cleared |
        | International Transit, Linehaul Departed                               |  NO      | Cross-border - linehaul departed |
        | International Transit, Linehaul Scheduled                              |  NO      | Cross-border - linehaul scheduled |
        | International Transit, Linehaul Arrived                                |  NO      | Cross-border - linehaul arrived |
        | International Transit, Customs Cleared                                 |  NO      | Cross-border - customs cleared |
        | International Transit, Customs Held                                    |  NO      | Cross-border - held at customs |
        | International Transit, Handed Over to Last Mile                        |  NO      | Cross-border - handed over to last mile |
        | International Transit, Returned to Sender at Origin Facility           |  YES     | Cross-border - returned to sender at origin Facility |
        | International Transit, Returned to XB Warehouse                        |  YES     | Cross-border - parcel is returned to cross-border fulfillment warehouses  |
        | International Transit, Fulfillment Request Submitted                   |  NO      | Cross-border - a fulfillment request is submitted (can be Disposing request, Reship request or Relabel request) |
        | International Transit, Fulfillment Packed                              |  NO      | Cross-border - parcel is packed for fulfillment  |
        | International Transit, En Route to Origin Facility                     |  NO      | Cross-border - en route to origin facility |
        | International Transit, Parcel Exception                                |  NO      | Cross-border - parcel exception |
        | International Transit, Parcel Disposed                                 |  NO      | Cross-border - parcel has been disposed |
        | International Transit, Parcel Lost                                     |  NO      | Cross-border - parcel has been lost |
        | International Transit, Parcel Damaged                                  |  NO      | Cross-border - parcel has been damaged |
      # Migration guide from webhooks V1
      If you are currently using webhooks V1, we have a [migration guide](https://docs.google.com/document/d/14pPO1f7C4_kc9DQ5CLgTcM-XIRXw89qXX_oMhcHXDOk).

      # Receive a webhook

      After you registered a webhook URL with Ninja Van, we will issue an HTTP POST request to the specified URL every time an event occurs.
      The request's POST parameters contain JSON data relevant to the event that triggered the request.

      ## Example: receive a Pickup Exception, Pending Reschedule webhook

      A Pickup Exception, Pending Reschedule webhook is sent after a pickup for a return or C2C order has failed. The
      webhook contains the Pickup Fail reason in the `failure_reason` field. For example:

      ```
      {
        ...
        "pickup_exception": {
          "failure_reason": "No parcels to pick up at all"
        }
      }
      ```

      This table shows possible reasons.

      | Reason     | Description |
      |-------------------------|----------|
      | Nobody at Location      | No one was present at the pickup location. |
      | Inaccurate Address      | Couldn't find the pickup location. |
      | Parcel Not available    | Item wasn't available at the pickup location, typically because the shipper unexpectedly ran out of stock, or packing got delayed. |
      | Parcel Too Bulky        | Parcel was too bulky to be picked up, typically because the size of the parcel was misreported. |
      | Cancellation Requested  | Pickup was cancelled upon request of the shipper. For some reason, the shipper did not want to fulfill the order at all. |

      The reasons may differ based on the country. For a complete list, contact your Account Manager.

      ## Example: receive a Delivery Exception, Pending Reschedule webhook

      A Pending Reschedule webhook is sent after a delivery for a normal order has failed. The
      webhook contains the delivery failure reason in the `failure_reason` field. For example:

      ```
      {
        ...
        "delivery_exception": {
          "failure_reason": "Nobody at Location"
        }
      }
      ```

      This list shows possible reasons:
      * Address is correct but customer is not available
      * Customer requested change of delivery date / time
      * Customer requested change of delivery location
      * Address on AWB is correct
      * Address on AWB is incorrect
      * Address was outside of driver coverage area
      * I had insufficient time to complete all my deliveries
      * Vehicle breakdown
      * Delay due to unexpected traffic conditions
      * Delay due to natural disasters or nationwide emergencies
      * Unattempted - Parcel Issues
      * Office address, closed
      * Office address, open but no one to receive
      * Residential address, but no one to receive
      * Package is fine - unable to collect COD
      * Package is fine - Customer wishes to cancel order
      * Package is defective - Damaged
      * Package is defective - Wrong item inside
      * Location is inaccessible (restricted area)
      * Refused entry by security personnel
      * Driver cannot find location (lat-long issues)
      * Incomplete Address provided (no unit number, block number, etc.)
      * Specified Address was incorrect or Recipient has moved

      The reasons may differ based on the country. For a complete list, contact your Account Manager.

      ## Example: receive an RTS Triggered webhook

      A Delivery Exception, Return to Sender Initiated webhook is sent after multiple failed attempts to customer and Ninjavan is going to return the parcel back to the shipper.
      The webhook contains the RTS reason in the `failure_reason` field. For example:

      ```
      {
        ...
        "delivery_exception": {
          "failure_reason": "Nobody at Location"
        }
      }
      ```

      This table shows possible reasons.

      | Reason                              | Description |
      |------------------------------------------|-------------|
      | Nobody at Location                       | No one was present at the delivery location.                     |
      | Unable to find Address                   | Couldn't find the delivery location. |
      | Item refused at Doorstep                 | Item was refused at the delivery location. |
      | Refused to pay COD                       | Customer requested for delivery reschedule at a date far in the future (for example, 1 month later) or the delivery failed three times. A failure of three times includes two attempts that were rescheduled by the customer. |
      | Customer delayed beyond delivery period  | Order was cancelled by the shipper. |

      The reasons may differ based on the country. For a complete list, contact your Account Manager.

      ## Sample webhook payloads

      This section shows sample JSON payloads for different webhooks.

      **Note:** The `image_uris` array may vary in size depending on the number of photos, which can range from zero to many. Supported image file formats include .jpeg and .png. The `signature_uri` field also supports .jpeg and .png formats.

      **Pending Pickup**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pending Pickup"
        "status": "Pending Pickup",
        "is_parcel_on_rts_leg": false,
      }
      ```

       **Driver dispatched for Pickup**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Driver dispatched for Pickup",
        "status": "Driver dispatched for Pickup",
        "is_parcel_on_rts_leg": false
      }
      ```

      **Picked Up, In Transit to Origin Hub**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Picked Up, In Transit to Origin Hub",
        "status": "Picked Up",
        "is_parcel_on_rts_leg": false,
        "picked_up_information": {
          "state": "In Transit to Origin Hub",
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Pending Pickup, Shipper Dropoff**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pending Pickup, Shipper Dropoff",
        "status": "Pending Pickup",
        "is_parcel_on_rts_leg": false,
        "arrived_at_pudo_information": {
          "state": "Shipper Dropoff",
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Pickup Exception, Pending Reschedule**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pickup Exception, Pending Reschedule",
        "status": "Pickup Exception",
        "is_parcel_on_rts_leg": false,
        "pickup_exception": {
          "state": "Pending Reschedule",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Pickup Exception, Reattempt Scheduled**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pickup Exception, Reattempt Scheduled",
        "status": "Pickup Exception",
        "is_parcel_on_rts_leg": false,
        "pickup_exception": {
          "state": "Reattempt Scheduled",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
        }
      }
      ```

      **Pickup Exception, Max Attempts Reached**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pickup Exception, Max Attempts Reached",
        "status": "Pickup Exception",
        "is_parcel_on_rts_leg": false,
        "pickup_exception": {
          "state": "Max Attempts Reached",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
        }
      }
      ```

      **Pickup Exception, Pending Retrieval from PUDO**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Pickup Exception, Pending Retrieval from PUDO",
        "status": "Pickup Exception",
        "is_parcel_on_rts_leg": false,
        "pickup_exception": {
          "state": "Pending Retrieval from PUDO",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
        }
      }
      ```

      **Arrived at Origin Hub**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Arrived at Origin Hub",
        "status": "Arrived at Origin Hub",
        "is_parcel_on_rts_leg": false,
        "arrived_at_origin_hub_information": {
          "country": "ID",
          "city": "Tangerang",
          "hub": "JKT-KOI"
        }
      }
      ```

      **Arrived at Transit Hub**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Arrived at Transit Hub",
        "status": "Arrived at Transit Hub",
        "is_parcel_on_rts_leg": false,
        "arrived_at_transit_hub_information": {
          "country": "ID",
          "city": "Tangerang",
          "hub": "JKT-KOI"
        }
      }
      ```

      **Arrived at Destination Hub**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Arrived at Destination Hub",
        "status": "Arrived at Destination Hub",
        "is_parcel_on_rts_leg": false,
        "arrived_at_destination_hub_information": {
          "country": "ID",
          "city": "Tangerang",
          "hub": "JKT-KOI"
        }
      }
      ```

      **In Transit to Next Sorting Hub**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "In Transit to Next Sorting Hub",
        "status": "In Transit to Next Sorting Hub",
        "is_parcel_on_rts_leg": false,
        "in_transit_to_next_sorting_hub_information": {
          "country": "ID",
          "city": "Tangerang",
          "hub": "JKT-KOI"
        }
      }
      ```

      **On Vehicle for Delivery**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "On Vehicle for Delivery",
        "status": "On Vehicle for Delivery",
        "is_parcel_on_rts_leg": false,
        "on_vehicle_information": {
          "allow_doorstep_dropoff": false,
        }
      }
      ```

      **At PUDO, Pending Customer Collection**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "At PUDO, Pending Customer Collection",
        "status": "At PUDO",
        "is_parcel_on_rts_leg": false,
        "arrived_at_pudo_information": {
          "state": "Pending Customer Collection"
        }
      }
      ```

      **Parcel Measurements Update**

      Weight is in kg and dimensions are in cm.

      ```
      {
        "tracking_id": "NVXYZ123",
        "shipper_order_ref_no": "LSS45R3Z",
        "timestamp": "2024-02-19T07:03:13+0800",
        "event": "Parcel Measurements Update",
        "status": "Parcel Measurements Update",
        "is_parcel_on_rts_leg": false,
        "parcel_measurements_information": {
          "weight": 1,
          "dimensions": {
            "length": 40,
            "width": 20,
            "height": 10
          }
        }
      }
      ```

      **Delivered, Collected by Customer**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivered, Collected by Customer",
        "status": "Delivered",
        "is_parcel_on_rts_leg": false,
        "delivery_information": {
          "state": "Collected by Customer",
          "left_in_safe_place": true,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivered, Left at Doorstep**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivered, Left at Doorstep",
        "status": "Delivered",
        "is_parcel_on_rts_leg": false,
        "delivery_information": {
          "state": "Left at Doorstep",
          "left_in_safe_place": true,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivered, Received by Customer**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivered, Received by Customer",
        "status": "Delivered",
        "is_parcel_on_rts_leg": false,
        "delivery_information": {
          "state": "Received by Customer",
          "left_in_safe_place": true,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Pending Reschedule**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Pending Reschedule",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Pending Reschedule",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Reattempt Scheduled**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Reattempt Scheduled",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Reattempt Scheduled",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
        }
      }
      ```

      **Delivery Exception, Max Attempts Reached**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Max Attempts Reached",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Max Attempts Reached",
          "failure_reason": "No parcels to pick up at all",
          "rescheduled_date": "",
          "is_liable": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Parcel Overstayed at PUDO**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Parcel Overstayed at PUDO",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Parcel Overstayed at PUDO",
          "failure_reason": "",
          "rescheduled_date": "",
          "is_liable": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Parcel Lost**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Parcel Lost",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Parcel Lost",
          "failure_reason": "NV NOT LIABLE - RETURN PARCEL",
          "rescheduled_date": "",
          "is_liable": true,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Parcel Damaged**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Parcel Damaged",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": false,
        "delivery_exception": {
          "state": "Parcel Damaged",
          "failure_reason": "NV LIABLE - PARCEL DISPOSED",
          "rescheduled_date": "",
          "is_liable": true,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Delivery Exception, Return to Sender Initiated**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Delivery Exception, Return to Sender Initiated",
        "status": "Delivery Exception",
        "is_parcel_on_rts_leg": true,
        "rts_reason": "Automated Failed Delivery Management - Max Delivery Attempt",
        "delivery_exception": {
          "state": "Return to Sender Initiated",
          "failure_reason": "Automated Failed Delivery Management - Customer reject/cancel",
          "rescheduled_date": "",
          "is_liable": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Returned to Sender**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Returned to Sender",
        "status": "Returned to Sender",
        "is_parcel_on_rts_leg": true,
        "rts_reason": "Automated Failed Delivery Management - Max Delivery Attempt",
        "delivery_information": {
          "state": "",
          "left_in_safe_place": false,
          "proof": {
            "signature_uri": "https://link-to-signature-photo.com",
            "image_uris": [
              "https://link-to-first-proof-photo.com",
              "https://link-to-second-proof-photo.com"
            ],
            "signed_by": {
              "name": "Name of Signer",
              "contact": "+6512345678",
              "relationship": "Brother"
            }
          }
        }
      }
      ```

      **Cancelled**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Cancelled",
        "status": "Cancelled",
        "is_parcel_on_rts_leg": false,
        "cancellation_information": {
          "reason": "Cancellation reason : API CANCELLATION REQUEST"
        }
      }
      ```

      **Return to Shipper Exception, Parcel triggered for Shipper Collection**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Return to Shipper Exception, Parcel triggered for Shipper Collection",
        "status": "Return to Shipper Exception",
        "is_parcel_on_rts_leg": false,
        "recovery_information": {
          "state": "Parcel triggered for Shipper Collection"
        }
      }
      ```

      **Return to Shipper Exception, Parcel collected by Shipper**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Return to Shipper Exception, Parcel collected by Shipper",
        "status": "Return to Shipper Exception",
        "is_parcel_on_rts_leg": false,
        "recovery_information": {
          "state": "Parcel collected by Shipper"
        }
      }
      ```

      **Return to Shipper Exception, Parcel Scrapped**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Return to Shipper Exception, Parcel Scrapped",
        "status": "Return to Shipper Exception",
        "is_parcel_on_rts_leg": false,
        "recovery_information": {
          "state": "Parcel Scrapped"
        }
      }
      ```

      **Return to Shipper Exception, Max Attempts Reached**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "Return to Shipper Exception, Max Attempts Reached",
        "status": "Return to Shipper Exception",
        "is_parcel_on_rts_leg": false,
        "recovery_information": {
          "state": "Max Attempts Reached"
        }
      }
      ```

      **International Transit, Handed Over to Origin Facility**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Handed Over to Origin Facility",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Handed Over to Origin Facility",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Arrived at Origin Facility**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Arrived at Origin Facility",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Arrived at Origin Facility",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Processed at Origin Facility**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Processed at Origin Facility",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Processed at Origin Facility",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Handed Over to Linehaul**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Handed Over to Linehaul",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Handed Over to Linehaul",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Export Cleared**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Export Cleared",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Export Cleared",
          "remark": "Placeholder comment here"
          "stage": "Export",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Linehaul Departed**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Linehaul Departed",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Linehaul Departed",
          "remark": "Placeholder comment here"
          "stage": "Export",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Linehaul Scheduled**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Linehaul Departed",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Linehaul Scheduled",
          "remark": "Placeholder comment here"
          "stage": "Export",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Linehaul Arrived**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Linehaul Arrived",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Linehaul Arrived",
          "remark": "Placeholder comment here"
          "stage": "Import",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Customs Cleared**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Customs Cleared",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Customs Cleared",
          "remark": "Placeholder comment here"
          "stage": "Import",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Customs Held**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Customs Held",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Customs Held",
          "remark": "Placeholder comment here"
          "stage": "Import",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Handed Over to Last Mile**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Handed Over to Last Mile",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Handed Over to Last Mile",
          "remark": "Placeholder comment here"
          "stage": "Import",
          "linehaul_information": {
              "transport_type": "AIR",
              "master_awb": "180-76440302",
              "origin_port": "SIN",
              "origin_country": "SG",
              "destination_port": "MNL",
              "destination_country": "PH",
              "estimated_time_of_departure": "2021-01-25T15:15:00Z",
              "estimated_time_of_arrival": "2021-01-27T18:50:00Z",
              "vessel_no": "5J804"
          }
        }
      }
      ```

      **International Transit, Returned to Sender at Origin Facility**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Returned to Sender at Origin Facility",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Returned to Sender at Origin Facility",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Returned to XB Warehouse**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Returned to XB Warehouse",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Returned to XB Warehouse",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Fulfillment Request Submitted**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Fulfillment Request Submitted",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Fulfillment Request Submitted",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Fulfillment Packed**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Fulfillment Packed",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Fulfillment Packed",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, En Route to Origin Facility**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, En Route to Origin Facility",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "En Route to Origin Facility",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Parcel Exception**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Parcel Exception",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Parcel Exception",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Parcel Disposed**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Parcel Disposed",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Parcel Disposed",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Parcel Lost**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Parcel Lost",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Parcel Lost",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      **International Transit, Parcel Damaged**

      ```
      {
        "tracking_id": "DX149431",
        "shipper_order_ref_no": "8374",
        "timestamp": "2006-01-02T15:04:05-0700",
        "event": "International Transit, Parcel Damaged",
        "status": "International Transit",
        "is_parcel_on_rts_leg": false,
        "international_transit_information": {
          "state": "Parcel Damaged",
          "remark": "Placeholder comment here",
          "stage": "Export"
        }
      }
      ```

      # Proof image URLs
      For all proof image URLs (including both proof of delivery and signature image URLs), the URL will expire in 90 days.

      # Verify a webhook
      Ninja Van passes along a digital signature with each request in the `X-Ninjavan-Hmac-Sha256` header. The signature is generated with the HMAC algorithm, using your [Client Secret](#section/Introduction/Authentication) as a key and SHA256 digest mode.

      When you receive a request, compute the HMAC digest according to the
      following algorithm and compare it to the value in the `X-Ninjavan-Hmac-Sha256` header. If they
      match, the webhook was sent from Ninja Van and the data has not been compromised.

      **Important:** Ninja Van does not utilize static IP addresses for webhook requests. Consequently, IP whitelisting is not a reliable security measure. To ensure the authenticity of webhook requests, please verify the digital signature included in each request.

      Note: The json body used for hash generation should not be encoded/encrypted in any way.

      Correct sample of Webhook JSON body:
      ```
      {"tracking_id":"TESTTRACKINGID","shipper_order_ref_no":"TESTREFNO","timestamp":"2024-11-21T11:45:40+0800","status":"Arrived at Origin Hub","is_parcel_on_rts_leg":false,"arrived_at_origin_hub_information":{"country":"SG","city":"Singapore","hub":"test"}}
      ```

      One example of a bad Webhook JSON body which you should NOT be using:
      ```
      {\"tracking_id\":\"TESTTRACKINGID\",\"shipper_order_ref_no\":\"TESTREFNO\",\"timestamp\":\"2024-11-21T11:45:40+08:00\",\"status\":\"Arrived at Origin Hub\",\"is_parcel_on_rts_leg\":false,\"arrived_at_origin_hub_information\":{\"country\":\"SG\",\"city\":\"Singapore\",\"hub\":\"test\"}}
      ```


      Following are webhook verification examples in different languages.

      **PHP**

      ```

      <?php

      define('CLIENT_SECRET', 'insert-your-client-secret-here');
      $data = file_get_contents('php://input');

      function verify_webhook($data, $hmac_header){
      $calculated_hmac = base64_encode(hash_hmac('sha256', $data , CLIENT_SECRET, true));
      echo $calculated_hmac;
      return ($hmac_header == $calculated_hmac);
      }

      $hmac_header = 'Ru6nS2bSEPRaRAq+GM0cMMvVxyFz8sVkKjSI6rD1jgY=';

      $verified = verify_webhook($data, $hmac_header);

      ?>

      ```


      **Ruby**

      ```

      require 'openssl'
      require 'base64'
      //>
      hash = OpenSSL::HMAC.digest('sha256', 'INSERT-YOUR-CLIENT-SECRET-HERE', 'INSERT-YOUR-JSON-BODY-HERE')

      puts hash
      hashedValue = Base64.encode64(hash)
      puts hashedValue

      ```

      **Go**

      ```

      package main

      import (
        "crypto/hmac"
        "crypto/sha256"
        "encoding/base64"
        "fmt"
      )

      func verifyWebhook(body string, secret string) string {
        key := []byte(secret)
        h := hmac.New(sha256.New, key)
        h.Write([]byte(body))
        return base64.StdEncoding.EncodeToString(h.Sum(nil))
      }

      func main() {
        fmt.Println(verifyWebhook("INSERT-YOUR-JSON-BODY-HERE", "INSERT-YOUR-CLIENT-SECRET-HERE"))
      }

      ```

      **Node JS**

      Prerequisite: install the [crypto-js](https://www.npmjs.com/package/crypto-js) dependency.

      ```
      //NodeJS

      const HMACSHA256 = require("crypto-js/hmac-sha256");
      const BASE64 = require('crypto-js/enc-base64');

      const calculatedHmac = BASE64.stringify(HMACSHA256('INSERT-YOUR-JSON-BODY-HERE', 'INSERT-YOUR-CLIENT-SECRET-HERE'));
      console.log(calculatedHmac);
      ```


      **C#**

      ```
      using System;
      using System.Text;
      using System.Collections.Generic;
      using System.Linq;
      using System.IO;
      using System.Text.RegularExpressions;
      using System.Security.Cryptography;

      namespace WebhookTester
      {
          public class Program
          {
              public static void Main(string[] args)
              {
                  //Your code goes here
                  string clientSecret = "INSERT-YOUR-CLIENT-SECRET-HERE";
                  string jsonBody = "INSERT-YOUR-JSON-BODY-HERE";
                  string calculatedHmac = calculateHmac(jsonBody, clientSecret);
                  Console.WriteLine(verifyWebhook(calculatedHmac,"HMAC-HEADER-RECEIVED-IN-REQUEST"));

              }

              static string calculateHmac(string jsonBody, string clientSecret)
              {
                  Encoding encoding = Encoding.UTF8;
                  var key = encoding.GetBytes(clientSecret);
                  HMACSHA256 hmacsha256 = new HMACSHA256(key);
                  var byteArray = encoding.GetBytes(jsonBody);
                  var result = hmacsha256.ComputeHash(byteArray);
                  return Convert.ToBase64String(result);
              }

              static bool verifyWebhook(string calculatedHmac, string hmacHeader)
              {
                return calculatedHmac.Equals(hmacHeader);
              }
          }

      }
      ```


      **Java**

      Using library [Apache Common Codec](https://commons.apache.org/proper/commons-codec/)

      ```

      import java.security.InvalidKeyException;
      import java.security.NoSuchAlgorithmException;
      import javax.crypto.Mac;
      import javax.crypto.spec.SecretKeySpec;
      import org.apache.commons.codec.binary.Base64;


      public class MyClass {
          public static String calculateHmac(String message, String secret) throws InvalidKeyException, NoSuchAlgorithmException {
              String algorithm = "HmacSHA256";
              Mac sha256_HMAC = Mac.getInstance(algorithm);
              SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), algorithm);
              sha256_HMAC.init(secret_key);
              return Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
          }

          public static Boolean verifyWebhook(String calculatedHmac, String hmacHeader)
          {
              return calculatedHmac.equals(hmacHeader);
          }

          public static void main(String[] args) {
              String clientSecret = "INSERT-YOUR-CLIENT-SECRET-HERE";
              String jsonBody = "INSERT-YOUR-JSON-BODY-HERE";
              try {
                  String calculatedHmac = calculateHmac(jsonBody, clientSecret);
                  System.out.println(verifyWebhook(calculatedHmac,"HMAC-HEADER-RECEIVED-IN-REQUEST" ));
              } catch (Exception e) {
                  System.out.println("Error: " + e);
              }
          }
      }

      ```


      # Respond to a webhook
      To acknowledge receipt of a webhook, your endpoint must return an HTTP `200 OK` status code. Any response outside of
      the `2xx` range suggests to Ninja Van that you didn't receive your webhook. To this end, Ninja Van
      implemented a 3-second timeout period and a retry period for subscriptions.

      You should monitor your application for failing webhooks. If you're receiving a Ninja Van webhook,
      the most important thing to do is respond quickly.

      We recommend that apps defer processing until after the response has been sent. To ensure that
      webhooks are not sent repeatedly even after you received them, respond with a `200 OK`
      status code before carrying on with any further in-house webhook processing.

      If you would like Ninja Van to retry sending the webhook, respond with any error code other than 200-299 or 400-499. This will indicate an issue on our side and request a retry from Ninja Van.

      **Note:** If we notice that too many webhooks are rejected or not acknowledged,
      you will get blocked and stop receiving webhooks from us. So make sure to monitor
      your application for failing webhooks. As soon as you can acknowledge our webhooks with
      a `200 OK` status code, you will continue receiving webhooks for subsequent events.

      # Configure a webhook

      The trouble with testing your webhooks through the API is that you need a publicly visible URL to
      handle them. Unlike client-side redirects, webhooks originate directly from the server. This means
      that you can't use the following as an endpoint in your testing environment:
      * Localhost
      * Any URL ending with the word "internal" (such as thisshop.com/internal)
      * Fictitious domains, such as www.example.com

      Fortunately, there are a couple of tools that make working with webhooks during development
      much easier. Among them RequestBin, Pagekite, and ngrok.

      # What if everything blows up?

      Say, your hosting center has exploded and your app has been offline for a long time. Don't worry—Ninja Van keeps sending webhooks at an exponentially increasing
      time interval for a particular event, 48 hours after the event occurrence time. After this 48-hour time
      window, we'll drop the webhook. Ensure that your services have the capacity to handle all
      incoming webhooks as and when you go online.

  - name: Plugin integration
    description: |+
      With plugin integration, we extend access to Ninja Van's APIs, enabling plugins and platforms to seamlessly integrate with our services. 
      This allows you to offer Ninja Dash-like experiences to all standalone Ninja Van shippers. 
      The shipper can enjoy the same smooth and efficient experience, whether they are using Ninja Dash directly or through their preferred plugin or platform.

      # Who should use plugin integration
      Plugin integration is recommended for those seeking a streamlined and efficient shipping solution for their customers. This option is especially advantageous if you are an enabler, aggregator, or plugin for eCommerce platforms, offering broader access to a variety of APIs, including order management and webhook functionalities. Plugin Integration allows you to extend Ninja Dash-like experiences effortlessly, enhancing your service offerings to Ninja Van standalone shippers.

      # Get started
      1. You inform us (Ninja Van) that you would like to integrate with our plugin APIs.
      2. You and your Account Manager finalize the commercial agreements.
      3. Your Account Manager initiates the plugin integration process.
      4. You review the [plugin integration requirements](#tag/Plugin-integration/Integration-requirements) and explore [available plugin APIs](#tag/Plugin-APIs), each specified with the scope required.
      5. You start designing the integration flow by creating a C4 diagram and sequence diagram to provide an overview of the integration. Additionally, prepare sequence diagrams for each integration flow, illustrating the interactions with plugin APIs. Ensure that each flow is able to address the key questions outlined in [the audit guideline](#tag/Plugin-integration/Audit-guideline)
      6. Once the diagrams are ready, send an email to devsupport@ninjavan.co, clearly specifying the plugin name, country of integration, required scopes, and redirect URI for the testing environment.
      7. Our developer support team review your submitted documents. 
      8. You receive two sets of credentials—Client ID and Client Secret—for accessing the Ninja Van sandbox environment. These include one set for the **plugin** and another for the **shipper account**, enabling you to perform integration tasks and conduct end-to-end testing effectively.
      9. You start the integration work based on the approved design, using the Ninja Van sandbox environment. Ensure that all relevant user test scenarios are thoroughly executed to validate the integration
      10. Once end-to-end testing is complete and you're ready for a system audit, please email devsupport@ninjavan.co with the following information
          1. Testing Environment URL: A link to the environment where your plugin is deployed, configured, and integrated with the Ninja Van sandbox.
          2. Shipper Login Credentials: Credentials to access the plugin as a shipper.
          3. Customer Login Credentials: Credentials to access the plugin as a customer (if applicable).
          4. Plugin Guide, a document or user guide that:
              * Explains how to use the plugin platform
              * Details the steps for creating orders
              * Describes user interactions with features involving integration with Ninja Van plugin APIs
              * Demonstrates expected outcomes for all requested scopes
          5. Production Redirect URL: The redirect URL for the production setup of your plugin.
      11. Our local developer support team performs preliminary tests of the plugin in your testing environment. You may receive feedback during this process. Please ensure that the diagram and implementation are updated accordingly.
      12. Our regional QA team conducts a system audit.
      13. After successful auditing in the sandbox environment, we setup your production access with the redirect URL for production in Step 10.
      14. You receive client credentials-Client ID and Client Secret-for production environment.
      15. You start on board shipper to use the plugin in production.

      # Integration requirements
      To ensure a consistent experience for our shippers across all platforms and plugins, the integration **must**, at a minimum, implement the following APIs:
      * [OAuth API](#tag/Plugin-APIs/paths/~11.0~1oauth~1token/post)
      * [Logout API](#tag/Plugin-APIs/paths/~1global~1aaa~11.0~1logout/post)
      * [Order Create API](#tag/Plugin-APIs/paths/~1{countryCode}~1plugins~14.2~1orders/post)
      * [Order Cancel API](#tag/Plugin-APIs/paths/~1{countryCode}~1plugins~12.2~1orders~1{trackingNo}/delete)

      **Note:** Only audited scopes will be granted access in the production environment.

      # Audit guideline
      Here are some tips for ensuring a successful audit, focusing on these key areas:

      **Authentication**
      * Handle connection including login flow, handles redirects, and generates tokens for merchants when they first use the plugin.
      * Specify the storage and reuse of tokens within your plugin, along with details and conditions on the token regeneration process.
      * Handle disconnection, which handles token, subscriptions (if any) cleanup when shipper chooses to disconnect.
      * Five minutes before the token expires, or if a request to a Ninja Van API returns an HTTP 401 status code, generate a new token.

      **Webhook APIs**
      * Specify when webhook subscriptions creation will be triggered.
      * Handle processing upon receiving subscribed webhooks.

      **All APIs**
      * Handle both success (HTTP 200) and failure scenarios (HTTP 400, HTTP 401, HTTP 5XX).
        
      Ensure that the points mentioned above are appropriately addressed and are clearly illustrated in the diagrams. 

      # Integration flow
      1. The plugin client should show a button that directs the shipper to connect their Ninja Van account at the plugin client site.
      2. When the shipper clicks the button to connect to Ninja Van, the plugin client should redirect the shipper to the Ninja Dash login page and provide the following in the URL parameters: 
          * Client ID
          * Scopes: we expect them to be space separated. Make sure to encode this parameter using encodeURIComponent
          * State
          
          Sample sandbox Ninja Dash login URL:
          `https://dashboard-sandbox.ninjavan.co/oauth/login?client_id=<your_client_id>&scopes=SHIPPER_PUBLIC_APIS_CANCEL_ORDER%20SHIPPER_PUBLIC_APIS_CREATE_ORDER&state=anything`

      3. The login page will be displayed by Ninja Dash.
      4. The shipper log in using the Ninja Van shipper credentials.
      5. Ninja Van authorization server checks and authorizes shipper login into Ninja Dash.
      6. The permission grant form is for the shipper to give permission to the plugin client to act on behalf of their Ninja Van account with the scopes listed.
      7. The shipper clicks Allow to give permission to the plugin client to act on behalf, Deny if otherwise.
      8. Ninja Van authorization server then grants permission scopes to the plugin client.
      9. After granting the permission, the Ninja Van authorization server redirects back to the plugin client redirect URI adding code and state as URL parameters.

          Sample redirect URI with code:
            `https://plugin.url/path/to/callback?code=abc1234&state=anything`

      10. The plugin client receives code in the URL parameter.
      11. The code received in the previous step should be used along with the client ID and client secret to generate the access token. 
      12. Once the access token is generated, the plugin client stores the access token, refresh token and reuse before expiry to call the plugin APIs with the access token.

      # Terminology
      | Term     | Definition |
      |-------------------------|----------|
      | Plugin client      | The application that wants to access data or perform actions on behalf of the shipper. |
      | Plugin name        | This will be shown to the shipper at different places where Ninja Van needs to reference the plugin. |
      | Redirect URI       | The plugin client URI which the Ninja Van authorization server will redirect the shipper to after granting permission to the plugin client. |
      | Ninja Van authorization server | The application that knows the shipper, where the shipper already has an account. |
      | Client ID | The unique identifier for the plugin client and it's used by the Ninja Van authorization server to get the plugin client information. |
      | Client secret | This value is used to request and refresh access tokens. |
      | Shipper | The user who is the owner of the Ninja Van shipper account and allows the plugin client to act on their behalf. |
      | State | The unique one-time identifier is to be provided by the plugin client and can be used to prevent malicious attacks. The information is passed when the plugin client redirects the shipper to the Ninja Dash login page and it will be passed back from the Ninja Van authorization server as it is to the client after the shipper grants permission successfully. |
      | Scopes | The granular permissions that the shippers like to grant to the plugin client, such as access to data or to perform actions. |
      | Ninja Dash | The Ninja Van website that the shipper interacts with. |
      | Code | A short-lived temporary authorization code from the Ninja Van authorization server and the plugin client should pass back to the authorization server in exchange for an access token. |

  - name: Plugin APIs
    description: |+
      The purpose of the Plugin APIs is to provide plugins and platforms access to act on behalf of shippers, subject to their consent, in both the sandbox and production environments.

      **Note:** For close partners intending to serve multiple countries within the same platform, we provide access to an experimental API. Feel free to reach out to us to discuss your use case.

  - name: Reference
    description: |+
      # FAQ
      ## OAuth API
      ### 1. Where can I find the Client ID and Client Secret?
      The Client ID and Client Secret are available in your Ninja Dashboard account. If you don't have access
      to Dashboard, contact your Account Manager.

      ### 2. Can I use the same Client ID and Client Secret for sandbox and production?
      No, because Ninja Dashboards in the sandbox and production environments are different, and they use different credentials. 
      To obtain a Client ID and Client Secret for production, log in to your production Dashboard, same way as you would do for sandbox. 
      If you don't have access to Dashboard in production, contact your Account Manager.

      ### 3. Should I regenerate the Client ID and Client Secret in my Ninja Dashboard account after I get access to production?
      You don't need to regenerate the Client ID and Client Secret. But make sure to regenerate your token
      after you're granted access to the production environment.

      ### 4. I just received integration audit approval but I'm still encountering authentication issues. Why?
      You need to generate new access tokens for production after you've got the audit approval. See [Get access to production](#section/Get-started/Get-access-to-production).

      ## Order API
      ### 1. Can I submit orders for my integration audit using Postman or any API testing tool?
      No. The purpose of an integration audit is to verify that your integrated system meets the necessary requirements. So 
      we expect shippers to submit orders via an integrated workflow that uses our APIs.

      ### 2. What are the prerequisites for testing the APIs?
      To test the APIs, you need to have the following:
      1. Ninja Van Postpaid Pro account.
      2. Access to Ninja Dashboard.

      ### 3. I'm trying to create an order via the API, but I received a 403 status code. How do I resolve it?
      If the Order API returns an HTTP `403` status code, then you don't have the required permissions to access the API. To troubleshoot, check the following:

      * **Sandbox:** Check that you're sending requests to the sandbox URL with the country code `sg`: `https://api-sandbox.ninjavan.co/sg`. This is because Ninja Van only supports the Singapore sandbox API.
      * **Production:** You won't have access to any API in the production environment until our developer support team reviews your integration. If you passed the integration audit and the API still returns a `403` status code, then verify that you're using the correct URL with the country code: `https://api.ninjavan.co/{countryCode}/4.2/orders`.

      ## Webhooks
      ### 1. Can I test webhooks in the sandbox environment?
      The only webhooks that can be tested in the sandbox environment are Pending Pickup
      and Cancelled webhooks. All the other webhooks require operational activities that aren't feasible in sandbox.

      ### 2. I create orders via Ninja Dashboard and want to subscribe to webhooks. Do I need to complete an integration audit?
      No. An integration audit is required only if you need access to our production APIs. As a Dashboard user, you need to first generate a Client ID and Client Secret, 
      and then directly subscribe to the webhooks and receive updates for your orders.

      # Errors
      ## Error glossary

      Ninja Van APIs return standard HTTP status codes. For errors, we also include extra information about what went wrong encoded in the response as JSON. The various HTTP status codes we may return are listed in this section.

      | Status code | Description |
      |-------|-------------------|
      | `400` | **Bad Request**<br>Your request couldn't be processed.<br><br>**Invalid Data**<br>Your request failed our validation.<br><br>These status codes generally contain a descriptive message, which helps you troubleshoot the error. See [Common error messages](#section/Errors/Common-error-messages). |
      | `401` | **Unauthorized**<br>The access token is either invalid or expired. For more information about access tokens, see [Authentication](#section/Introduction/Authentication). |
      | `403` | **Forbidden**<br>You don't have the required permissions to access the API. Following are the possible causes for this error.<br><br>- You're not using the correct sandbox URL. Ninja Van only supports the Singapore sandbox API, so all requests must be sent to the country code `sg`: `https://api-sandbox.ninjavan.co/sg`.<br><br>- You haven't passed the integration audit. You won't have access to any API in the production environment until our developer support team reviews your integration. If you passed the integration audit and the API still returns a `403` status code, then verify that you're using the correct URL with the country code: `https://api.ninjavan.co/{countryCode}/4.2/orders`.<br><br>- You're trying to access the waybill generation endpoint without a prior request. For more information, see [How to request access](#tag/Order-API/paths/~1{countryCode}~12.0~1reports~1waybill/get).<br><br>**The shipper's account is frozen and cannot be used.**<br>Your account has been frozen due to outstanding fees. To unfreeze the account, clear all due fees and contact your Account Manager for assistance. |
      | `429` | **API rate limit exceeded**<br>You've exceeded the request limit and got temporarily blocked from accessing the API. The block will be removed after a few hours, after which you can access the API again. |
      | `5xx` | **Internal Server Error**<br>These status codes are rare, and may happen for a small percentage of orders during peak periods. If the API returns a `5xx` status code, retry your request after some time. We encourage you to have a retry mechanism in place. |

      ## Common error messages
      This section describes common error messages for HTTP `400` status code returned by our APIs. If the error that you encountered isn't mentioned, try to resolve it based on the information in the response. If you still need help, send an email with the error details to [developer support](#section/Introduction/Contact-information).

      ### Order API
      #### Service level not supported

      **Error message:** Service Level is not supported for this shipper account.

      **Cause:** The service is not enabled in your account.

      **Suggested action:** To enable the service, contact your Account Manager.

      **Sample error response**
      ```
      {
        "error":
          {
            "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
            "title": "Invalid Data",
            "message": "Please check your request payload for validation errors.",
            "details":[
              {
                "reason": "Validation Error",
                "field": "null",
                "message": "Service Level is not supported for this shipper account."
              }
            ]
          }
      }
      ```

      #### UTF extended charset not supported

      **Error code:** 127014

      **Error message:** Invalid charset! UTF Extended charset is not supported

      **Cause:** The request payload contains special characters that include symbols, emojis, and so on.

      **Suggested action:** Remove these characters and try again.

      **Sample error response**

      ```
      {
        "error":
          {
            "code": "127014",
            "title": "Bad Request",
            "message": "Invalid charset! UTF Extended charset is not supported"
          }
      }
      ```

      #### Duplicate tracking ID

      **Error code:** 109201

      **Error message:** Tracking ID (123456789) has been used, please use a different tracking ID and try again

      **Cause:** You already created an order with this tracking ID.

      **Suggested action:** Use a unique `requested_tracking_number` for each order.

      **Sample error response**

      ```
      {
        "error": {
          "code": 109201,
          "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
          "title": "Duplicate Tracking ID",
          "message": "Tracking ID (123456789) has been used, please use a different tracking ID and try again"
          }
      }
      ```

      #### Invalid pickup or delivery time slot

      **Error message:** Invalid timeslot provided. Please check the API docs for a list of valid time slots.

      **Cause:** You provided an invalid pickup or delivery time slot.

      **Suggested action:** Specify valid time slots in `parcel_job.pickup_timeslot` and `parcel_job.delivery_timeslot`, and try again.

      **Sample error response**

      ```
      {
        "error": {
          "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
          "title": "Invalid Data",
          "message": "Please check your request payload for validation errors.",
          "details": [
          {
            "reason": "Validation Error",
            "message": "Invalid timeslot provided. Please check the API docs for a list of valid time slots."
          }
          ]
        }
      }
      ```

      #### Contact information not provided

      **Error message:** Invalid contact information. Please provide either a 'email' or 'phone_number'.

      **Cause:** You didn't provide any contact information.

      **Suggested action:** Specify either the `email` or `phone_number`, and try again.

      **Sample error response**

      ```
      {
        "error": {
          "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
          "title": "Invalid Data",
          "message": "Please check your request payload for validation errors.",
          "details": [
            {
              "reason": "Validation Error",
              "field": null,
              "message": "'Invalid contact information. Please provide either a 'email' or 'phone_number'."
            }
          ]
        }
      }
      ```

      #### Dimension information not provided

      **Error message:** At least a form of dimension must be provided. Please check with your shipper support team to see which one you should be providing.

      **Cause:** You didn't provide any dimensions.

      **Suggested action:** Specify at least one of following dimensions.
      1. Size: `parcel_job.dimensions.size`
      2. Weight: `parcel_job.dimensions.weight`
      3. Length, width, and height: `parcel_job.dimensions.length`, `parcel_job.dimensions.width`, and `parcel_job.dimensions.height`.

      **Sample error response**

      ```
      {
        "error": {
        "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
        "title": "Invalid Data",
        "message": "Please check your request payload for validation errors.",
        "details": [
          {
            "reason": "Validation Error",
            "message": "At least a form of dimension must be provided. Please check with your shipper support team to see which one you should be providing.",
            "field": "parcel_job.dimensions"
          }
        ]
        }
      }
      ```

      #### Invalid requested tracking prefix

      **Error message:** The 'requested_tracking_number' field must start with the correct prefix.

      **Cause:** The `requested_tracking_number` field doesn't contain the prefix configured for your account.

      **Suggested action:** Check with your Account Manager on the prefix configured, and use the right prefix.

      **Sample error response**

      ```
      {
        "error": {
        "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
        "title": "Invalid Data",
        "message": "Please check your request payload for validation errors.",
        "details": [
          {
            "reason": "Validation Error",
            "field": null,
            "message": "The 'requested_tracking_number' field must start with the correct prefix."
          }
          ]
        }
      }
      ```

      #### Invalid requested tracking number

      **Error message:** The 'requested_tracking_number' field must be between 1 and 9 characters (please do not pass a prefix), and can contain alphanumeric characters, and the (-) dash symbol.

      **Cause:** You provided the wrong format for the requested_tracking_number field.

      **Suggested action:** Check whether you are using the correct format, and try again.

      **Sample error response**

      ```
      {
        "error": {
        "request_id": "1ba6da4f-0709-416e-9e30-a5546130b4d2",
        "title": "Invalid Data",
        "message": "Please check your request payload for validation errors.",
        "details": [
          {
            "reason": "Validation Error",
            "field": null,
            "message": "The 'requested_tracking_number' field must be between 1 and 9 characters (please do not pass a prefix), and can contain alphanumeric characters, and the (-) dash symbol."
          }
          ]
        }
      }
      ```

      # Sample order creation requests
      This section provides sample order creation payloads for pre-determined business scenarios.
      ## Standard parcels
      In this scenario, an e-commerce platform sends Standard parcels.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | Parcel | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | Standard | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        

      ```
      {
        "service_type": "Parcel",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with the v-day flowers.",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }
      ```


      ## Standard parcels with a pickup
      In this scenario, an e-commerce platform sends Standard parcels that require a pickup.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
        

      ```  
      {
        "service_type": "Parcel",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot":{
              "start_time": "09:00",
              "end_time": "18:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }
      ```


      ## Standard parcels with cash on delivery
      In this scenario, an e-commerce platform sends Standard parcels with the payment term "cash on delivery" (COD).

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.cash_on_delivery | DECIMAL | This is the cash amount that Ninja Van's drivers and riders will collect from the recipient upon delivery. |
        | parcel_job.cash_on_delivery_currency | STRING | The ISO 4217 currency code that the cash amount is in. |


      ```
      {
        "service_type": "Parcel",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference": {
          "merchant_order_number": "ship-123"
        },
        "from": {
          "name": "John Doe",
          "phone_number": "+6563337193",
          "email": "john.doe@gmail.com",
          "address": {
            "address1": "30 Jln Kilang Barat",
            "address2": "",
            "country": "SG",
            "postcode": "159363"
          }
        },
        "to": {
          "name": "Jane Doe",
          "phone_number": "+6502700553",
          "email": "jane.doe@gmail.com",
          "address": {
            "address1": "30 Jln Kilang Barat",
            "address2": "",
            "country": "SG",
            "postcode": "159363"
          }
        },
        "parcel_job": {
          "cash_on_delivery": 200.00,
          "cash_on_delivery_currency": "SGD",
          "pickup_date": "2021-12-15",
          "delivery_start_date": "2021-12-16",
          "delivery_timeslot": {
            "start_time": "09:00",
            "end_time": "22:00",
            "timezone": "Asia/Singapore"
          },
          "delivery_instructions": "Please be careful with as the packages are heavy",
          "dimensions": {
            "weight": 1.0,
            "size": "L"
          }
        }
      }

      ```


      ## Standard parcels dropped off at a Ninja Point
      In this scenario, an e-commerce platform sends Standard parcels that will be dropped off at a Ninja Point.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.is_pickup_required | BOOLEAN | Either set this to `false`, or undefined. |
        
      ```

      {
        "service_type": "Parcel",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }

      ```

      ## Standard Cold Chain parcels 
      In this scenario, an e-commerce platform sends Standard parcels requiring temperature-controlled environments

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
        | parcel_job.temperature_control | JSON | Required for cold chain parcels. |
        | parcel_job.temperature_control.temperature_range | STRING | Indicates the temperature required for the cold chain. <ul><li>`Frozen` (Lower than -15°C)</li><li>`Chilled` (2°C to 8°C)</li><li>`Cool` (18°C to 25°C)</li></ul>  |
      ```

      {
        "service_type": "Parcel",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            },
            "temperature_control": {
              "temperature_range": "Chilled"
            }
        }
      }

      ```


      ## Return parcels to a seller's warehouse with a pickup
      In this scenario, a customer of an e-commerce platform returns a parcel to a seller's warehouse, with a pickup required.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Return` | For returning parcels, the corresponding order type is `Return`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Return`. |
        | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |

      ```

      {
        "service_type": "Return",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jalan Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "28 Jalan Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159362"
            }
        },
        "parcel_job":{
            "is_pickup_required":true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_address":{
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address":{
                  "address1": "30 Jalan Kilang Barat",
                  "address2": "",
                  "country": "SG",
                  "postcode": "159363"
              }
            },
            "pickup_date": "2021-12-15",
            "pickup_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "pickup_approximate_volume": "Half-Van Load",
            "pickup_instruction": "Please be careful, the package is fragile",
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with the v-day flowers.",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }

      ```

      ## Return parcels to a seller's warehouse but dropped off at a Ninja Point
      In this scenario, a customer of an e-commerce platform returns a parcel to a seller's warehouse by dropping it off at a Ninja Point.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Return` | For returning parcels, the corresponding order type is `Return`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Return`. |
        | parcel_job.is_pickup_required | BOOLEAN | Either set this to `false`, or undefined. |

      ```

      {
        "service_type": "Return",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }

      ```


      ## Express parcels
      In this scenario, an e-commerce platform sends Express parcels.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Express` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        
      ```

      {
        "service_type": "Parcel",
        "service_level": "Express",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+60138201527",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "17 Lorong Jambu 3",
              "address2": "",
              "area": "Taman Sri Delima",
              "city": "Simpang Ampat",
              "state": "Pulau Pinang",
              "country": "MY",
              "postcode": "51200"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+60103067174",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "Jalan PJU 8/8",
              "address2": "",
              "area": "Damansara Perdana",
              "city": "Petaling Jaya",
              "state": "Selangor",
              "country": "MY",
              "postcode": "47820"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Kuala_Lumpur"
            },
            "delivery_instructions": "Please be careful with the v-day flowers.",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }

      ```


      ## Standard Marketplace parcels
      In this scenario, an e-commerce platform sends Standard Marketplace parcels.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Marketplace` | Marketplaces require special *marketplace* data, so the order type must be `Marketplace`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Marketplace`. |
        | marketplace | JSON | Required because the order type is `Marketplace`. |

      ```

      {
        "service_type": "Marketplace",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+60138201527",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "17 Lorong Jambu 3",
              "address2": "",
              "area": "Taman Sri Delima",
              "city": "Simpang Ampat",
              "state": "Pulau Pinang",
              "country": "MY",
              "postcode": "51200"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+60103067174",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "Jalan PJU 8/8",
              "address2": "",
              "area": "Damansara Perdana",
              "city": "Petaling Jaya",
              "state": "Selangor",
              "country": "MY",
              "postcode": "47820"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Kuala_Lumpur"
            },
            "delivery_instructions": "Please be careful with the v-day flowers.",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        },
        "marketplace":{
            "seller_id": "4567",
            "seller_company_name": "FlowersRUs"
        }
      }

      ```


      ## Standard Marketplace parcels with a pickup
      In this scenario, an e-commerce platform sends Standard Marketplace parcels that require a pickup.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Marketplace` | Marketplaces require special *marketplace* data, so the order type must be `Marketplace`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Marketplace`. |
        | marketplace | JSON | Required because the order type is `Marketplace`. |

      ```

      {
        "service_type": "Marketplace",
        "service_level": "Standard",
        "requested_tracking_number": "NV-123456",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "28 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot":{
              "start_time": "09:00",
              "end_time": "18:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        },
        "marketplace":{
            "seller_id": "4567",
            "seller_company_name": "Ninja Van Logistics"
        }
      }

      ```


      ## Standard Marketplace parcels with a Premium pickup
      In this scenario, an e-commerce platform sends Standard Marketplace parcels that require a Premium level pickup. 

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Marketplace` | Marketplaces require special *marketplace* data, so the order type must be `Marketplace`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Marketplace`. |
        | marketplace | JSON | Required because the order type is `Marketplace`. |
        | parcel_job.pickup_service_type | `Scheduled` | For indicating that you require a scheduled pickup. |
        | parcel_job.pickup_service_level | `Premium` | For indicating that your scheduled pickup is a Premium level pickup. |

      ```

      {
          "service_type": "Marketplace",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
              "merchant_order_number": "ship-123"
          },
          "from": {
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address": {
                  "address1": "30 Jln Kilang Barat",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "to": {
              "name": "Jane Doe",
              "phone_number": "+6502700553",
              "email": "jane.doe@gmail.com",
              "address": {
                  "address1": "28 Jln Kilang Barat",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "parcel_job": {
              "is_pickup_required": true,
              "pickup_service_type": "Scheduled",
              "pickup_service_level": "Premium",
              "pickup_date": "2021-12-15",
              "pickup_timeslot": {
                  "start_time": "09:00",
                  "end_time": "12:30",
                  "timezone": "Asia/Singapore"
              },
              "pickup_instructions": "Parcels will be ready by 9 AM, and I'm leaving at 10:31 AM.",
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                  "start_time": "09:00",
                  "end_time": "22:00",
                  "timezone": "Asia/Singapore"
              },
              "delivery_instructions": "Please be careful with as the packages are heavy",
              "dimensions": {
                  "weight": 1.0,
                  "size": "L"
              }
          },
          "marketplace": {
              "seller_id": "4567",
              "seller_company_name": "Ninja Van Logistics"
          }
      }

      ```


      ## Standard Marketplace parcels self-collected at a Ninja Point
      In this scenario, an e-commerce platform sends Standard Marketplace parcels that will be self-collected by recipients at a Ninja Point.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Marketplace` | Marketplaces require special *marketplace* data, so the order type must be `Marketplace`. |
        | service_level | `Standard` | Used for SLA calculations. Adjust the required service level accordingly. |
        | parcel_job | JSON | Required because the order type is `Marketplace`. |
        | parcel_job.allow_self_collection | BOOLEAN | If you allow self-collection, then set this to `true`. |
        | to.collection_point | STRING | Required if you allow self-collection. This must contain the short name of the Ninja Point. |

      ```

      {
          "service_type": "Marketplace",
          "service_level": "Standard",
          "requested_tracking_number": "1234-56789",
          "reference": {
              "merchant_order_number": "ship-123"
          },
          "from": {
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address": {
                  "address1": "30 Jln Kilang Barat",
                  "address2": "",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "to": {
              "name": "Jane Doe",
              "phone_number": "+6502700553",
              "email": "jane.doe@gmail.com",
              "address": {
                  "address1": "181 Orchard Rd",
                  "address2": "",
                  "country": "SG",
                  "postcode": "238896"
              },
              "collection_point": "Ninja PUDO @ Orchard Road"
          },
          "parcel_job": {
              "is_pickup_required": false,
              "allow_self_collection": true,
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                  "start_time": "09:00",
                  "end_time": "22:00",
                  "timezone": "Asia/Singapore"
              },
              "delivery_instructions": "Please be careful with the v-day flowers.",
              "dimensions": {
                  "weight": 0.5,
                  "size": "S"
              }
          },
          "marketplace": {
              "seller_id": "4567",
              "seller_company_name": "Ninja Van Logistics"
          }        
      }

      ```    

      ## Standard Marketplace parcels where a shipper drops-off a parcel at a Ninja Point
      In this scenario, an e-commerce platform sends Standard Marketplace parcels, where the parcels are dropped off at a Ninja Point.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Marketplace` | Marketplaces require special *marketplace* data, so the order type must be `Marketplace`. |
        | service_level | `Standard` | Used for SLA calculations. |
        | parcel_job | JSON | Required because the order type is `Marketplace`. |
        | parcel_job.is_pickup_required | BOOLEAN | Either set this to `false`, or undefined. |
        
      ```

      {
        "service_type": "Marketplace",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference":{
            "merchant_order_number": "ship-123"
        },
        "from":{
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "to":{
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address":{
              "address1": "30 Jln Kilang Barat",
              "address2": "",
              "country": "SG",
              "postcode": "159363"
            }
        },
        "parcel_job":{
            "is_pickup_required":false,
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot":{
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions":{
              "weight":1.0,
              "size": "L"
            }
        }
      }

      ```    


      ## International parcels imported by a forwarder
      In this scenario, an e-commerce platform sends International parcels that were imported by a forwarder. This is mostly used for Non-SEA outbound to SEA orders (eg. China outbound to Singapore).

      ### Create Order 4.2

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `International` | For sending parcels that were imported. |
        | service_level | `Standard` | Used for SLA calculations. |
        | international | JSON | Required because the order type is `International`. |
        | international.portation | `Import` | For indicating that the parcel was imported by a forwarder. This determines how the parcel is returned to the shipper if the recipient rejects it. |
        | international.service_code | STRING | For specifying your service code provided by your Account Manager. |
        | customs_declaration | JSON | Required because the order type is `International`. |
        | parcel_job | JSON | Required because the order type is `International`. |
        | parcel_job.items | JSON | Required because the order type is `International`. |

      ```
          
      {
        "service_type": "International",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference": {
          "merchant_order_number": "ship-123"
        },
        "from": {
          "name": "Jane Doe",
          "phone_number": "+86138201527",
          "email": "jane.doe@gmail.com",
          "address":{
            "address1": "No. 39 Tianxing Road, Huangjiang Town",
            "address2": "",
            "city": "Dongguan City",
            "state": "Guangdong",
            "country": "CN",
            "postcode": "523516"
          }
        },
        "to": {
          "name": "John Doe",
          "phone_number": "+6563337193",
          "email": "john.doe@gmail.com",
          "address": {
            "address1": "30 Jln Kilang Barat",
            "address2": "",
            "country": "SG",
            "postcode": "159363"
          }
        },
        "parcel_job": {
          "is_pickup_required": false,
          "delivery_start_date": "2021-12-16",
          "delivery_timeslot": {
            "start_time": "09:00",
            "end_time": "22:00",
            "timezone": "Asia/Singapore"
          },
          "delivery_instructions": "Please be careful with the v-day flowers.",
          "dimensions": {
            "weight": 1.0,
            "size": "L"
          },
          "items": [
            {
              "item_description": "men's shirts",
              "native_item_description": "男人衬衫",
              "unit_value": 15.99,
              "unit_weight": 1.5,
              "product_url": "https://www.product.url/12345.pdf",
              "invoice_url": "https://www.invoice.url/12345.pdf",
              "hs_code": 543111,
              "made_in_country": "CN"
            },
            {
              "item_description": "men's shirts",
              "native_item_description": "男人衬衫",
              "unit_value": 5.99,
              "unit_weight": 1.0,
              "product_url": "https://www.product.url/12346.pdf",
              "invoice_url": "https://www.invoice.url/12346.pdf",
              "hs_code": 543111,
              "made_in_country": "CN"
            }
          ]
        },
        "international": {
          "portation": "Import",
          "service_code": "CNSG0015"
        },
        "customs_declaration": {
          "goods_currency": "SGD",
          "battery_type": "No Battery",
          "battery_packing": "No Battery",
          "trade_terms": "DDU",
          "is_gst_included_in_goods_value": true,
          "gst_registration_number": "M212345678"
        }
      }
            
      ```

      ## International parcels exported by Ninja Van and imported into another country
      In this scenario, an e-commerce platform sends International parcels that are to be exported out by Ninja Van and imported into another country for last-mile delivery. This is used for Intra Asean orders (eg. Singapore exports to Malaysia).

      ### Create Order 4.2

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `International` | For sending parcels that are to be exported. |
        | service_level | `Standard` | Used for SLA calculations. |
        | international | JSON | Required because the order type is `International`. |
        | international.portation | `Export` | For indicating that the parcel needs to be exported to another country for last-mile delivery. This determines how the parcel is returned to the shipper if the recipient rejects it. |
        | international.service_code | STRING | For specifying your service code provided by your Account Manager. |
        | customs_declaration | JSON | Required because the order type is `International`. |
        | parcel_job | JSON | Required because the order type is `International`. |
        | parcel_job.items | JSON | Required because the order type is `International`. |

      ```
          
      {
        "service_type": "International",
        "service_level": "Standard",
        "requested_tracking_number": "1234-56789",
        "reference": {
          "merchant_order_number": "ship-123"
        },
        "from": {
          "name": "John Doe",
          "phone_number": "+6563337193",
          "email": "john.doe@gmail.com",
          "address": {
            "address1": "30 Jln Kilang Barat",
            "address2": "",
            "country": "SG",
            "postcode": "159363"
          }
        },
        "to": {
          "name": "Jane Doe",
          "phone_number": "+60103067174",
          "email": "jane.doe@gmail.com",
          "address": {
            "address1": "Jalan PJU 8/8",
            "address2": "",
            "area": "Damansara Perdana",
            "city": "Petaling Jaya",
            "state": "Selangor",
            "country": "MY",
            "postcode": "47820"
          }
        },
        "parcel_job": {
          "is_pickup_required": false,
          "delivery_start_date": "2021-12-16",
          "delivery_timeslot": {
            "start_time": "09:00",
            "end_time": "22:00",
            "timezone": "Asia/Singapore"
          },
          "delivery_instructions": "Please be careful with the v-day flowers.",
          "dimensions": {
            "weight": 1.0,
            "size": "L"
          },
          "items": [
            {
              "item_description": "men's shirts",
              "native_item_description": "男人衬衫",
              "unit_value": 29.99,
              "unit_weight": 1.5,
              "product_url": "https://www.product.url/12345.pdf",
              "invoice_url": "https://www.invoice.url/12345.pdf",
              "hs_code": 543111,
              "made_in_country": "SG"
            },
            {
              "item_description": "men's shirts",
              "native_item_description": "男人衬衫",
              "unit_value": 5.99,
              "unit_weight": 1.0,
              "product_url": "https://www.product.url/12346.pdf",
              "invoice_url": "https://www.invoice.url/12346.pdf",
              "hs_code": 543111,
              "made_in_country": "CN"
            }
          ]
        },
        "international": {
          "portation": "Export",
          "service_code": "SGMY0025"
        },
        "customs_declaration": {
          "goods_currency": "MYR",
          "battery_type": "No Battery",
          "battery_packing": "No Battery",
          "trade_terms": "DDU",
          "lvg_registration_number": "M212345678"
        }
      }
            
      ```


      ## Standard parcels self-collected at a Ninja Point
      In this scenario, an e-commerce platform sends Standard parcels that will be self-collected by recipients at a Ninja Point.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending orders, the corresponding order type is `Parcel`. |
        | service_level | `Standard` | Used for SLA calculations. Adjust the required service level accordingly. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.allow_self_collection | BOOLEAN | If you allow self-collection, then set this to `true`. |
        | to.collection_point | STRING | Required if you allow self-collection. This must contain the short name of the Ninja Point. |

      ```

      {
          "service_type": "Parcel",
          "service_level": "Standard",
          "requested_tracking_number": "1234-56789",
          "reference": {
              "merchant_order_number": "ship-123"
          },
          "from": {
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address": {
                  "address1": "30 Jln Kilang Barat",
                  "address2": "",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "to": {
              "name": "Jane Doe",
              "phone_number": "+6502700553",
              "email": "jane.doe@gmail.com",
              "address": {
                  "address1": "181 Orchard Rd",
                  "address2": "",
                  "country": "SG",
                  "postcode": "238896"
              },
              "collection_point": "Ninja PUDO @ Orchard Road"
          },
          "parcel_job": {
              "is_pickup_required": false,
              "allow_self_collection": true,
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                  "start_time": "09:00",
                  "end_time": "22:00",
                  "timezone": "Asia/Singapore"
              },
              "delivery_instructions": "Please be careful with the v-day flowers.",
              "dimensions": {
                  "weight": 0.5,
                  "size": "S"
              }
          }
      }

      ```


      ## Corporate HQ sending Standard parcels
      In this scenario, a corporate HQ sends Standard parcels.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Parcel` | For sending parcels under the corporate HQ's account. |
        | service_level | `Standard` | Used for SLA calculations. Adjust the required service level accordingly. |
        | parcel_job | JSON | Required because the order type is `Parcel`. |
        | parcel_job.cash_on_delivery | DECIMAL | For cash on delivery parcels, this is the cash amount that Ninja Van's drivers and riders will collect from the recipient upon delivery. |
        | parcel_job.cash_on_delivery_currency | STRING | The ISO 4217 currency code that the cash amount is in. |
        | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |

      ```

      {
          "service_type": "Parcel",
          "service_level": "Standard",
          "requested_tracking_number": "1234-56789",
          "reference": {
              "merchant_order_number": "ship-123"
          },
          "from": {
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address": {
                  "address1": "30 Jln Kilang Barat",
                  "address2": "",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "to": {
              "name": "Jane Doe",
              "phone_number": "+6502700553",
              "email": "jane.doe@gmail.com",
              "address": {
                  "address1": "69 Lorong 6 Geylang",
                  "address2": "",
                  "country": "SG",
                  "postcode": "399221"
              }
          },
          "parcel_job": {
              "is_pickup_required": false,
              "cash_on_delivery": 200.00,
              "cash_on_delivery_currency": "SGD",
              "allow_self_collection": true,
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                  "start_time": "09:00",
                  "end_time": "22:00",
                  "timezone": "Asia/Singapore"
              },
              "delivery_instructions": "Please be careful with the v-day flowers.",
              "dimensions": {
                  "weight": 0.5,
                  "size": "S"
              }
          }
      }

      ```

      ## Corporate HQ sending Standard parcels for branches with a Premium pickup
      In this scenario, a corporate HQ sends Standard parcels for their branches with a Premium pickup required.

        | Parameter | Value | Description |
        |-------------|----------|----------|
        | service_type  | `Corporate` | For sending parcels under the corporate HQ's account. |
        | service_level | `Standard` | Used for SLA calculations. |
        | corporate | JSON | Required because the order type is `Corporate`. |  
        | corporate.branch_id | STRING | Specify the corporate branch ID that this order belongs to. |  
        | parcel_job | JSON | Required because the order type is `Corporate`. |
        | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
        | parcel_job.pickup_service_type | Scheduled | For indicating that you require a scheduled pickup. |
        | parcel_job.pickup_service_level | Premium | For indicating that your scheduled pickup is a Premium level pickup. |         
        

      ```

      {
          "service_type": "Corporate",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
              "merchant_order_number": "ship-123"
          },
          "from": {
              "name": "John Doe",
              "phone_number": "+6563337193",
              "email": "john.doe@gmail.com",
              "address": {
                  "address1": "30 Jln Kilang Barat",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "to": {
              "name": "Jane Doe",
              "phone_number": "+6502700553",
              "email": "jane.doe@gmail.com",
              "address": {
                  "address1": "28 Jln Kilang Barat",
                  "country": "SG",
                  "postcode": "159363"
              }
          },
          "corporate": {
              "branch_id": "1234"
          },
          "parcel_job": {
              "is_pickup_required": true,
              "pickup_service_type": "Scheduled",
              "pickup_service_level": "Premium",
              "pickup_date": "2021-12-15",
              "pickup_timeslot": {
                  "start_time": "09:00",
                  "end_time": "10:30",
                  "timezone": "Asia/Singapore"
              },
              "pickup_instructions": "Parcels will be ready by 9 AM, and I'm leaving at 10:31 AM.",
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                  "start_time": "09:00",
                  "end_time": "22:00",
                  "timezone": "Asia/Singapore"
              },
              "delivery_instructions": "Please be careful with as the packages are heavy",
              "dimensions": {
                  "weight": 1.0,
                  "size": "L"
              }
          }
        }

      ```

      ## B2B Bundles with a standard pickup
      In this scenario, a shipper sends a B2B bundle (1 or more cartons) to businesses, with a pickup required. The Delivery Order (DO) is to be returned to shipper after delivery.

      | Parameter | Value | Description |
      |-------------|----------|----------|
      | service_type  | `B2B Bundle` | For sending a bundle order to B2B businesses. |
      | service_level | `Standard` | Used for SLA calculations. |
      | b2b.documents_required | Array of STRING | Specify that RDO is required, and that the Delivery Order will be returned to shipper. |  
      | bundle_information.total_quantity | number | Specify the total number of pieces to be delivered together |  
      | bundle_information.requested_piece_tracking_numbers | Array of STRING | Specify the tracking number of the individual pieces |
      | parcel_job | JSON | Required because the order type is `B2B Bundle`. |
      | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
      | parcel_job.pickup_service_type | Scheduled | For indicating that you require a scheduled pickup. |
      | parcel_job.pickup_service_level | Standard | For indicating that your scheduled pickup is a Standard level pickup. |

      ```
      {
          "service_type": "B2B Bundle",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
            "merchant_order_number": "ship-123"
          },
          "b2b": {
            "documents_required": [
              "RDO"
            ]
          },
          "bundle_information": {
            "total_quantity": 2,
            "requested_piece_tracking_numbers": [ "MYTRACKING1234", "MYTRACKING1235" ]
          },
          "from": {
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address": {
              "address1": "30 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "to": {
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address": {
              "address1": "28 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "parcel_job": {
            "is_pickup_required": true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot": {
              "start_time": "09:00",
              "end_time": "10:30",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot": {
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions": {
              "weight": 1.0,
              "size": "L"
            }
          }
      }
      ```

      ## Corporate HQ shipping B2B Bundles with a standard pickup
      In this scenario, a corporate HQ sends a B2B bundle (1 or more cartons) to businesses, with a pickup required. The Delivery Order (DO) is to be returned to shipper after delivery.

      | Parameter | Value | Description |
      |-------------|----------|----------|
      | service_type  | `Corporate B2B Bundle` | For sending a bundle order to B2B businesses. |
      | service_level | `Standard` | Used for SLA calculations. |
      | corporate | JSON | Required because the order type is `Corporate`. |  
      | corporate.branch_id | STRING | Specify the corporate branch ID that this order belongs to. |
      | b2b.documents_required | Array of STRING | Specify that RDO is required, and that the Delivery Order will be returned to shipper. |  
      | bundle_information.total_quantity | number | Specify the total number of pieces to be delivered together |
      | bundle_information.requested_piece_tracking_numbers | Array of STRING | Specify the tracking number of the individual pieces |
      | parcel_job | JSON | Required because the order type is `B2B Bundle`. |
      | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
      | parcel_job.pickup_service_type | Scheduled | For indicating that you require a scheduled pickup. |
      | parcel_job.pickup_service_level | Standard | For indicating that your scheduled pickup is a Standard level pickup. |

      ```
      {
          "service_type": "Corporate B2B Bundle",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
            "merchant_order_number": "ship-123"
          },
          "b2b": {
            "documents_required": [
              "RDO"
            ]
          },
          "bundle_information": {
            "total_quantity": 2
            "requested_piece_tracking_numbers": [ "MYTRACKING1234", "MYTRACKING1235" ]
          },
          "from": {
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address": {
              "address1": "30 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "to": {
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address": {
              "address1": "28 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "corporate": {
              "branch_id": "1234"
          },
          "parcel_job": {
            "is_pickup_required": true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot": {
              "start_time": "09:00",
              "end_time": "10:30",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot": {
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions": {
              "weight": 1.0,
              "size": "L"
            }
          }
      }
      ```

      ## Cold Chain B2B Bundles with a standard pickup
      In this scenario, a shipper sends a temperature-sensitive B2B bundle (1 or more cartons) to businesses, with a pickup required. The Delivery Order (DO) is to be returned to shipper after delivery.

      | Parameter | Value | Description |
      |-------------|----------|----------|
      | service_type  | `B2B Bundle` | For sending a bundle order to B2B businesses. |
      | service_level | `Standard` | Used for SLA calculations. |
      | b2b.documents_required | Array of STRING | Specify that RDO is required, and that the Delivery Order will be returned to shipper. |  
      | bundle_information.total_quantity | number | Specify the total number of pieces to be delivered together |
      | bundle_information.requested_piece_tracking_numbers | Array of STRING | Specify the tracking number of the individual pieces |
      | parcel_job | JSON | Required because the order type is `B2B Bundle`. |
      | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
      | parcel_job.pickup_service_type | Scheduled | For indicating that you require a scheduled pickup. |
      | parcel_job.pickup_service_level | Standard | For indicating that your scheduled pickup is a Standard level pickup. |
      | parcel_job.temperature_control | JSON | Required for cold chain parcels. |
      | parcel_job.temperature_control.temperature_range | STRING | Indicates the temperature required for the cold chain. <ul><li>`Frozen` (Lower than -15°C)</li><li>`Chilled` (2°C to 8°C)</li><li>`Cool` (18°C to 25°C)</li></ul>  |

      ```
      {
          "service_type": "B2B Bundle",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
            "merchant_order_number": "ship-123"
          },
          "b2b": {
            "documents_required": [
              "RDO"
            ]
          },
          "bundle_information": {
            "total_quantity": 2
            "requested_piece_tracking_numbers": [ "MYTRACKING1234", "MYTRACKING1235" ]
          },
          "from": {
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address": {
              "address1": "30 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "to": {
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address": {
              "address1": "28 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "parcel_job": {
            "is_pickup_required": true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot": {
              "start_time": "09:00",
              "end_time": "10:30",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot": {
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions": {
              "weight": 1.0,
              "size": "L"
            },
            "temperature_control": {
              "temperature_range": "Chilled"
            }
          }
      }
      ```

      ## Cold Chain Corporate HQ shipping B2B Bundles with a standard pickup
      In this scenario, a corporate HQ sends a temperature-sensitive B2B bundle (1 or more cartons) to businesses, with a pickup required. The Delivery Order (DO) is to be returned to shipper after delivery.

      | Parameter | Value | Description |
      |-------------|----------|----------|
      | service_type  | `Corporate B2B Bundle` | For sending a bundle order to B2B businesses. |
      | service_level | `Standard` | Used for SLA calculations. |
      | corporate | JSON | Required because the order type is `Corporate`. |  
      | corporate.branch_id | STRING | Specify the corporate branch ID that this order belongs to. |
      | b2b.documents_required | Array of STRING | Specify that RDO is required, and that the Delivery Order will be returned to shipper. |  
      | bundle_information.total_quantity | number | Specify the total number of pieces to be delivered together |
      | bundle_information.requested_piece_tracking_numbers | Array of STRING | Specify the tracking number of the individual pieces |
      | parcel_job | JSON | Required because the order type is `B2B Bundle`. |
      | parcel_job.is_pickup_required | BOOLEAN | If you require a pickup, then set this to `true`. |
      | parcel_job.pickup_service_type | Scheduled | For indicating that you require a scheduled pickup. |
      | parcel_job.pickup_service_level | Standard | For indicating that your scheduled pickup is a Standard level pickup. |
      | parcel_job.temperature_control | JSON | Required for cold chain parcels. |
      | parcel_job.temperature_control.temperature_range | STRING | Indicates the temperature required for the cold chain. <ul><li>`Frozen` (Lower than -15°C)</li><li>`Chilled` (2°C to 8°C)</li><li>`Cool` (18°C to 25°C)</li></ul>  |

      ```
      {
          "service_type": "Corporate B2B Bundle",
          "service_level": "Standard",
          "requested_tracking_number": "NV-123456",
          "reference": {
            "merchant_order_number": "ship-123"
          },
          "b2b": {
            "documents_required": [
              "RDO"
            ]
          },
          "bundle_information": {
            "total_quantity": 2
            "requested_piece_tracking_numbers": [ "MYTRACKING1234", "MYTRACKING1235" ]
          },
          "from": {
            "name": "John Doe",
            "phone_number": "+6563337193",
            "email": "john.doe@gmail.com",
            "address": {
              "address1": "30 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "to": {
            "name": "Jane Doe",
            "phone_number": "+6502700553",
            "email": "jane.doe@gmail.com",
            "address": {
              "address1": "28 Jln Kilang Barat",
              "country": "SG",
              "postcode": "159363"
            }
          },
          "corporate": {
              "branch_id": "1234"
          },
          "parcel_job": {
            "is_pickup_required": true,
            "pickup_service_type": "Scheduled",
            "pickup_service_level": "Standard",
            "pickup_date": "2021-12-15",
            "pickup_timeslot": {
              "start_time": "09:00",
              "end_time": "10:30",
              "timezone": "Asia/Singapore"
            },
            "delivery_start_date": "2021-12-16",
            "delivery_timeslot": {
              "start_time": "09:00",
              "end_time": "22:00",
              "timezone": "Asia/Singapore"
            },
            "delivery_instructions": "Please be careful with as the packages are heavy",
            "dimensions": {
              "weight": 1.0,
              "size": "L"
            },
            "temperature_control": {
              "temperature_range": "Chilled"
            }
          }
      }
      ```


      # Zone code mapping
      This section describes the zone codes for the [Tariff API](#tag/Tariff-API). 
      Zone codes are used as identifiers to distinguish locations at granular levels, which vary by country.

      ## Indonesia 
      In Indonesia, zone codes are used to distinguish locations up to the Kecamatan (district) level.
      Each district is represented by 2 codes: `L1 tier code` for its Provinsi (province), and `L2 tier code` for its Kota/Kabupaten (city/regency) and Kecamatan.

      The mapping data is available as a CSV file: <a href="/static/media/ID_zone_code_mapping.csv">ID_zone_code_mapping.csv</a>.

      # Migration guide

      ## Migrating to Create Order 4.2
      This guide outlines the modifications required to transition to [Create Order v4.2](#tag/Order-API/paths/~1{countryCode}~14.2~1orders/post) and highlights key changes enhancing our international shipping experience.

      ### Notable changes

      #### 1. Currency Support for Cash On Delivery and Insurance Value
      Currency fields are now supported for `cash_on_delivery` and `insured_value`.

      #### 2. Introduction of International Service Code
      Users can now enroll in additional service codes specifically designed for shipping overseas, allowing them to specify the service code for each order.

      #### 3. Officialization of Customs Declaration Fields
      Customs declaration fields have been standardized, incorporating specific validations to enhance accuracy.

      #### 4. Enhanced Itemized Details for Customs Clearance
      More itemized details have been implemented to streamline the customs clearance process, providing comprehensive information.

      #### 5. Removal of Redundant Fields
      The `parcel_job.pickup_address_id` field has been removed from the system due to its lack of utility.

      ### How to migrate

      #### 1. Update Endpoint URL
      Ensure that your URL now points to the [Create Order v4.2](#tag/Order-API/paths/~1{countryCode}~14.2~1orders/post) endpoint.

      #### 2. Cash On Delivery
      If using Cash On Delivery, include the currency code in the `parcel_job.cash_on_delivery_currency` field. An example can be found [here](#tag/Reference/Sample-order-creation-requests/Standard-parcels-with-cash-on-delivery).

      #### 3. International Service Type Integration
      If you were previously integrated with the International service type:
      * Include the international service code provided by your Account Manager in the `international.service_code` field.
      * Rename `experimental_customs_declaration` to `customs_declaration`.
      * Provide parcel information in a list under `parcel_job.items` field.
      * Minimum required parameters for customs clearance are detailed in the table below:

        | Parameter | Old parameter | Description | Required |
        |-------------|----------|----------|----------|
        |international.service_code|-|New international requirement|Yes|
        |customs_declaration|experimental_customs_declaration|Removed `experimental`|Yes|
        |customs_declaration.goods_currency|experimental_customs_declaration.goods_currency|-|Yes|
        |customs_declaration.battery_type|experimental_customs_declaration.battery_type| `battery_type` is an enum |-|
        |customs_declaration.battery_packing|experimental_customs_declaration.battery_packing| `battery_packing` is an enum |-|
        |customs_declaration.trade_terms|experimental_customs_declaration.trade_terms| `trade_terms` is an enum |-|
        |parcel_job.items[i].item_description|experimental_customs_declaration.customs_description|-|Yes|
        |parcel_job.items[i].native_item_description|experimental_customs_declaration.native_customs_description|-|-|
        |parcel_job.items[i].unit_value|experimental_customs_declaration.goods_value|`unit_value` is a number|Yes|
        |parcel_job.items[i].hs_code|experimental_customs_declaration.hs_code|`hs_code` is a number|-|
        |parcel_job.items[i].invoice_url|experimental_customs_declaration.invoice_url|-|-|

      If you are new to international shipping:
      * Add the `International` service type.
      * Provide necessary fields, namely `international`, `customs_declaration`, and `parcel_job.items`.
      * Refer to our sample payloads [here](#tag/Reference/Sample-order-creation-requests/International-parcels-imported-by-a-forwarder).

      #### 5. API Credentials
      Existing API credentials should have access to the new version without requiring an integration audit. However, you could utilize our sandbox environment to test your integration and submit sample orders to our [developer support portal](#section/Introduction/Contact-information) for verification.

paths:
  "/{countryCode}/2.0/oauth/access_token":
    post:
      tags:
        - OAuth API
      summary: Request access token
      description: |-
        Returns a new OAuth Bearer access token. 

        ### Prerequisites

        To make requests to this endpoint, you need to have the Client ID and Client Secret credentials. For more information, see [Authentication](#section/Introduction/Authentication). 

        ### Implementation flow

        Your implementation must adhere to this flow:
        1. Generate an access token.
        2. Store the token, along with the expiration timestamp, in a persistent storage.
        3. Attach the token as a Bearer token with every API request to a Ninja Van API. This means that for the `Authorization` HTTP header, the value must be `Bearer <INSERT ACCESS TOKEN>`.
        4. Five minutes before the token expires, or if a request to a Ninja Van API returns an HTTP `401` status code, generate a new token.

        Validity period is dynamic and may change from time to time. The minimum validity period is *one hour*.

        **Note:** Always set `grant_type` to `client_credentials`.

      parameters:
        - name: countryCode
          in: path
          description: Country Code
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenGrantRequest"
        required: false
      responses:
        "200":
          description: Access token was successfully generated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenGrantResponse"
        "400":
          description: Access token wasn't generated because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Access token wasn't generated because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request POST 
              'https://api-sandbox.ninjavan.co/sg/2.0/oauth/access_token' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                  "client_id": "string",
                  "client_secret": "string",
                  "grant_type": "client_credentials"
                }'
      x-codegen-request-body-name: body
    x-summary: Generate OAuth Bearer access token
  "/{countryCode}/4.2/orders":
    post:
      tags:
        - Order API
      summary: >
        Create order 4.2
      description: |-
        Creates a new delivery order.  

        To avoid creating duplicate orders, we recommend sending a `requested_tracking_number` so that the API can use it to generate the waybill tracking number.

        In some cases, requests may fail due to timeouts or temporary network issues (example, load balancer latency, routing problems, or service unavailability).

        We recommend implementing a retry mechanism for the following scenarios:
        * Request timeouts (no response received)
        * Temporary network or connection errors
        * 5xx server errors

        For marketplace platforms, `marketplace` information is required. Using the provided `seller_id`, the API automatically creates a new Ninja Van shipper account for your marketplace seller, if the `seller_id` wasn't previously registered in Ninja Van's systems.

        For corporate accounts, `corporate` information is required. The corporate branch account has to be created under the corporate HQ before an order creation request can be made. Using `branch_id` field, the API creates orders for the corporate branch identified by the given branch ID.

        Please refer to this [migration guide](#tag/Reference/Migration-guide/Migrating-to-Create-Order-4.2) if you want to migrate order creation from v4.1 to v4.2.
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrderV4.2"
        required: false
      responses:
        "200":
          description: Order successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCreateResponseSuccess"
              examples:
                parcel-order-response:
                  summary: Parcel
                  value:
                    requested_tracking_number: 1234-56789
                    tracking_number: PREFIX1234-56789
                    service_type: Parcel
                    service_level: Standard
                    reference:
                      merchant_order_number: SHIP-1234-56789
                    from:
                      name: John Doe
                      phone_number: "+60138201527"
                      email: john.doe@gmail.com
                      address:
                        address1: 17 Lorong Jambu 3
                        address2: ""
                        area: Taman Sri Delima
                        city: Simpang Ampat
                        state: Pulau Pinang
                        address_type: office
                        country: MY
                        postcode: "51200"
                    to:
                      name: Jane Doe
                      phone_number: "+60103067174"
                      email: jane.doe@gmail.com
                      address:
                        address1: Jalan PJU 8/8
                        address2: ""
                        area: Damansara Perdana
                        city: Petaling Jaya
                        state: Selangor
                        address_type: home
                        country: MY
                        postcode: "47820"
                    parcel_job:
                      is_pickup_required: true
                      pickup_service_type: Scheduled
                      pickup_service_level: Standard
                      pickup_date: "2021-12-15"
                      pickup_timeslot:
                        start_time: "09:00"
                        end_time: "12:00"
                        timezone: Asia/Kuala_Lumpur
                      pickup_approximate_volume: Less than 3 Parcels
                      pickup_instructions: Pickup with care!
                      delivery_start_date: "2021-12-16"
                      delivery_timeslot:
                        start_time: "09:00"
                        end_time: "12:00"
                        timezone: Asia/Kuala_Lumpur
                      delivery_instructions: "If recipient is not around, leave parcel in power riser."
                      allow_weekend_delivery: true
                      dimensions:
                        weight: 1.5
                      items:
                        - item_description: Sample description
                          quantity: 1
                          is_dangerous_good: false
                b2b-bundle-order-response:
                  summary: B2B Bundle
                  value:
                    requested_tracking_number: 1234-56789
                    tracking_number: PREFIX1234-56789
                    service_type: B2B Bundle
                    service_level: Standard
                    reference:
                      merchant_order_number: SHIP-1234-56789
                    from:
                      name: John Doe
                      phone_number: "+60138201527"
                      email: john.doe@gmail.com
                      address:
                        address1: 17 Lorong Jambu 3
                        address2: ""
                        area: Taman Sri Delima
                        city: Simpang Ampat
                        state: Pulau Pinang
                        address_type: office
                        country: MY
                        postcode: "51200"
                    to:
                      name: Jane Doe
                      phone_number: "+60103067174"
                      email: jane.doe@gmail.com
                      address:
                        address1: Jalan PJU 8/8
                        address2: ""
                        area: Damansara Perdana
                        city: Petaling Jaya
                        state: Selangor
                        address_type: home
                        country: MY
                        postcode: "47820"
                    parcel_job:
                      is_pickup_required: true
                      pickup_service_type: Scheduled
                      pickup_service_level: Standard
                      pickup_date: "2021-12-15"
                      pickup_timeslot:
                        start_time: "09:00"
                        end_time: "12:00"
                        timezone: Asia/Kuala_Lumpur
                      pickup_approximate_volume: Less than 3 Parcels
                      pickup_instructions: Pickup with care!
                      delivery_start_date: "2021-12-16"
                      delivery_timeslot:
                        start_time: "09:00"
                        end_time: "12:00"
                        timezone: Asia/Kuala_Lumpur
                      delivery_instructions: "If recipient is not around, leave parcel in power riser."
                      allow_weekend_delivery: true
                      dimensions:
                        weight: 1.5
                      items:
                        - item_description: Sample description
                          quantity: 1
                          is_dangerous_good: false
                    b2b:
                      documents_required: ["RDO"]
                    bundle_information:
                      total_quantity: 2
                      requested_piece_tracking_numbers:
                        ["MYTRACKING1234", "MYTRACKING1235"]
                      pieces:
                        - tracking_number: "PREFIXMYTRACKING1234"
                        - tracking_number: "PREFIXMYTRACKING1235"
        "400":
          description: Order wasn't created because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                service-level-not-supported:
                  summary: Service level not supported
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: Service Level is not supported for this shipper account
                utf-extended-not-supported:
                  summary: UTF extended charset not supported
                  value:
                    error:
                      code: 127014
                      title: Bad Request
                      message: Invalid charset! UTF Extended charset is not supported
                duplicate-tracking-id:
                  summary: Duplicate tracking ID
                  value:
                    error:
                      code: 109201
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Duplicate Tracking ID
                      message: Tracking ID (123456789) has been used, please use a different tracking ID and try again
                invalid-timeslot:
                  summary: Invalid pickup or delivery time slot
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: Invalid timeslot provided. Please check the API docs for a list of valid time slots.
                invalid-contact-info:
                  summary: Contact information not provided
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "'Invalid contact information. Please provide either a 'email' or 'phone_number'."
                dimension-info-not-provided:
                  summary: Dimension information not provided
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: At least a form of dimension must be provided. Please check with your shipper support team to see which one you should be providing.
                          field: parcel_job.dimensions
                cod-not-configured:
                  summary: Cash on delivery not configured
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "Your account isn't configured for Cash on Delivery. Please check with your shipper support team on enabling this service."
                invalid-requested-tracking-number:
                  summary: Invalid requested tracking number
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "The 'requested_tracking_number' field must be between 1 and 9 characters (please do not pass a prefix), and can contain alphanumeric characters, and the (-) dash symbol."
                invalid-requested-tracking-prefix:
                  summary: Invalid requested tracking prefix
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "The 'requested_tracking_number' field must start with the correct prefix."
        "500":
          description: Order wasn't created because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request POST 'https://api-sandbox.ninjavan.co/sg/4.2/orders' \
            --header 'Authorization: Bearer string' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "service_type": "Parcel",
              "service_level": "Standard",
              "requested_tracking_number": "1234-56789",
              "reference": {
                "merchant_order_number": "SHIP-1234-56789"
                },
              "from": {
                "name": "John Doe",
                "phone_number": "+60138201527",
                "email": "john.doe@gmail.com",
                "address": {
                  "address1": "17 Lorong Jambu 3",
                  "address2": "",
                  "area": "Taman Sri Delima",
                  "city": "Simpang Ampat",
                  "state": "Pulau Pinang",
                  "address_type": "office",
                  "country": "MY",
                  "postcode": "51200"
                  }
                },
                "to": {
                "name": "Jane Doe",
                "phone_number": "+60103067174",
                "email": "jane.doe@gmail.com",
                "address": {
                  "address1": "Jalan PJU 8/8",
                  "address2": "",
                  "area": "Damansara Perdana",
                  "city": "Petaling Jaya",
                  "state": "Selangor",
                  "address_type": "home",
                  "country": "MY",
                  "postcode": "47820"
                  }
                },
            "parcel_job": {
              "is_pickup_required": true,
              "pickup_service_type": "Scheduled",
              "pickup_service_level": "Standard",
              "pickup_date": "2021-12-15",
              "pickup_timeslot": {
                "start_time": "09:00",
                "end_time": "12:00",
                "timezone": "Asia/Kuala_Lumpur"
                },
              "pickup_instructions": "Pickup with care!",
              "delivery_instructions": "If recipient is not around, leave parcel in power riser.",
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                "start_time": "09:00",
                "end_time": "22:00",
                "timezone": "Asia/Kuala_Lumpur"
                },
              "dimensions": {
                  "weight": 1.5
                },
              "items": [
                {
                  "item_description": "Sample description",
                  "quantity": 1,
                  "is_dangerous_good": false
                }
              ]
              }
            }'
      x-codegen-request-body-name: body
    x-summary: Create Order (v4.2 - Beta)
  "/{countryCode}/2.0/reports/waybill":
    get:
      tags:
        - Order API
      summary: Generate waybill
      description: |-
        Generates a waybill for an order.

        You can generate a waybill only for an order that is successfully processed. After an order creation request is accepted by the order creation endpoint, the order goes into a queue for further processing. 
        When it's fully processed, the platform generates a Pending Pickup webhook (see [Sample webhook payloads](#section/Receive-a-webhook/Sample-webhook-payloads)). This webhook gives your system an indication that a waybill can be generated.

        Waybill API should be called only once per Tracking ID (TID). Waybill should be stored and reused.

        **Note:** Orders with an `International` service type will feature a separate waybill format containing essential customs information necessary for the customs clearance process. If your order is international, kindly allow a brief processing time (recommended 5 minutes) for the order creation to be completed before initiating the waybill generation request.

        ### How to request access
        By default, Ninja Van doesn't grant the permission to use the waybill generation endpoint to any shipper, even in the sandbox environment. To request access, take these steps:

        1. Review the [Integration requirements](#section/Introduction/Integration-requirements).
        2. Reach out to your Account Manager to initiate the waybill integration audit.
        3. Refer to [Integration process](#section/Introduction/Integration-process) for more information regarding the process.

      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: tid
          in: query
          description: The `tracking_number` as generated by the Order API.
          required: true
          schema:
            minLength: 9
            pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
            type: string
        - name: hide_shipper_details
          in: query
          description: A flag for hiding shipper's details, such as contact information, on the waybill. If no flag is provided with the query, the details are hidden. To explicitly hide the details, set to `true`. To show the details, set to `false`.
          schema:
            type: boolean
        - name: orientation
          in: query
          description: Specifies the orientation of the generated waybill. The default value is `portrait`.
          schema:
            type: string
            enum:
              - portrait
              - landscape
      responses:
        "200":
          description: Waybill successfully generated. A PDF file will be returned in the response.
          content: {}
        "400":
          description: Waybill wasn't generated because of an invalid request.
          content: {}
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
              'https://api-sandbox.ninjavan.co/sg/2.0/reports/waybill?tid=:trackingNo&hide_shipper_details=1' \
                --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
    x-summary: Generate Waybill
  "/{countryCode}/2.2/orders/{trackingNo}":
    delete:
      tags:
        - Order API
      summary: Cancel order
      description: |-
        Cancels an existing delivery order. Only orders that are Pending Pickup can be cancelled.

        **Note:** The names of the parameters in this endpoint differ from the [order creation](#tag/Order-API/paths/~1{countryCode}~14.2~1orders/post) endpoint. 
        This is because the two endpoints use different specification versions.

      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: trackingNo
          in: path
          description: The `tracking_number` that our API returned in the order creation response.
          required: true
          schema:
            minLength: 9
            pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
            type: string
      responses:
        "200":
          description: Order successfully cancelled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderResponse"
        "400":
          description: Order wasn't cancelled because of an issue with the request.
          content: {}
        "404":
          description: Order wasn't cancelled because no orders were found that matched the query parameters.
          content: {}
        "500":
          description: Order wasn't cancelled because of an issue with the server.
          content: {}
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request DELETE \
              'https://api-sandbox.ninjavan.co/sg/2.2/orders/:trackingNo' \
                --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
    x-summary: Cancel Order
  "/{countryCode}/2.0/pudos":
    x-summary: List Ninja Points v2
    get:
      tags:
        - PUDO API
      summary: List Ninja Points v2
      description: >
        Returns a list of Ninja Points that meet the passed query parameters.
      parameters:
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: can_customer_collect
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can collect parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_post
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can create "post" parcels.
          required: false
          schema:
            type: boolean
        - name: allow_customer_return
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can return parcels.
          required: false
          schema:
            type: boolean
        - name: allow_shipper_send
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_pack
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off "pack" parcels.
          required: false
          schema:
            type: boolean
        - name: can_sell_packs
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can buy "pack" parcels.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ninja points successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistributionPointV2"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
            'https://api-sandbox.ninjavan.co/sg/2.0/pudos?can_customer_collect=false&allow_create_post=false&allow_customer_return=false&allow_shipper_send=false&allow_create_pack=false&can_sell_packs=false'
      x-codegen-request-body-name: body
  "/{countryCode}/2.1/pudos":
    x-summary: List paginated Ninja Points v2.1
    get:
      tags:
        - PUDO API
      summary: List paginated Ninja Points v2.1
      description: >
        Returns a list of paginated Ninja Points that meet the passed query parameters.
      parameters:
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: can_customer_collect
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can collect parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_post
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can create "post" parcels.
          required: false
          schema:
            type: boolean
        - name: allow_customer_return
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can return parcels.
          required: false
          schema:
            type: boolean
        - name: allow_shipper_send
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_pack
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off "pack" parcels.
          required: false
          schema:
            type: boolean
        - name: can_sell_packs
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can buy "pack" parcels.
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: 1-based page index of results to return; values < 1 are treated as 1
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          description: Number of results per page; values < 1 default to 100, > 1000 return error
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Paginated ninja points successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistributionPointV2.1"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
            'https://api-sandbox.ninjavan.co/sg/2.1/pudos?can_customer_collect=false&allow_create_post=false&allow_customer_return=false&allow_shipper_send=false&allow_create_pack=false&can_sell_packs=false&page=2&page_size=50'
      x-codegen-request-body-name: body
  "/{countryCode}/2.2/pudos":
    x-summary: List paginated Ninja Points v2.2
    get:
      tags:
        - PUDO API
      summary: List paginated Ninja Points v2.2
      description: >
        Returns a list of paginated Ninja Points that meet the passed query parameters.
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - ID
              - VN
              - PH
        - name: can_customer_collect
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can collect parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_post
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can create "post" parcels.
          required: false
          schema:
            type: boolean
        - name: allow_customer_return
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the customer can return parcels.
          required: false
          schema:
            type: boolean
        - name: allow_shipper_send
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off parcels.
          required: false
          schema:
            type: boolean
        - name: allow_create_pack
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can drop off "pack" parcels.
          required: false
          schema:
            type: boolean
        - name: can_sell_packs
          in: query
          description: Set this to `true` to fetch the list of Ninja Points where the shipper can buy "pack" parcels.
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: 1-based page index of results to return; values < 1 are treated as 1
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          description: Number of results per page ; values < 1 default to 100, > 1000 return error
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Paginated ninja points successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistributionPointV2.1"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
            'https://api-sandbox.ninjavan.co/sg/2.2/pudos?can_customer_collect=false&allow_create_post=false&allow_customer_return=false&allow_shipper_send=false&allow_create_pack=false&can_sell_packs=false&page=2&page_size=50'
            --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
  "/{countryCode}/1.0/send-orders/{trackingId}":
    x-summary: Scan parcel for shipper drop-off
    get:
      tags:
        - PUDO partners API
      summary: Scan parcel for shipper drop-off
      description: |+
        Triggers parcel scanning for shipper drop-off at a Ninja Point. Returns order information.
      parameters:
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: trackingId
          in: path
          description: Tracking ID of the order.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order successfully scanned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendParcelScanResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
            'https://api-sandbox.ninjavan.co/sg/1.0/send-orders/{trackingId}'
      x-codegen-request-body-name: body
  "/{countryCode}/1.0/send-orders/drop-off":
    x-summary: Trigger shipper drop-off for parcel
    post:
      tags:
        - PUDO partners API
      summary: Trigger shipper drop-off for parcel
      description: >
        Notifies Ninja Van that a parcel is being dropped off at a Ninja Point by a shipper. Returns parcels that are successfully dropped off and a list of errors if any.
      parameters:
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendWebhookRequest"
        required: true
      responses:
        "200":
          description: Parcels successfully dropped off (possibly some of them had errors).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendWebhookResponse"
        "400":
          description: Validation error (store doesn't exist or the list of tracking IDs is empty).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request POST \
            'https://api-sandbox.ninjavan.co/sg/1.0/send-orders/drop-off'
      x-codegen-request-body-name: body
  "/{countryCode}/1.0/dp-order-events":
    x-summary: Trigger webhooks for customer collection, driver drop-off, driver collection
    put:
      tags:
        - PUDO partners API
      summary: Trigger webhooks for customer collection, driver drop-off, driver collection
      description: |+
        Sends Ninja Van a webhook whenever one of the following events occur: 
        * Customer collects a parcel from a Ninja Point.
        * Driver drops off a parcel at a Ninja Point. 
        * Driver collects a parcel from a Ninja Point.
      parameters:
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DpOrderEventRequest"
            examples:
              store_received_from_driver:
                summary: Webshook for when the store received the parcel from the driver.
                value:
                  tracking_id: NVSGBEDBP03784ADPL
                  store_id: PSVKV4M16A
                  received_at: 2022-06-01 00:00:00
              store_released_to_customer:
                summary: Webhook for when the store released the parcel to the customer.
                value:
                  tracking_id: NVSGBEDBP03784ADPL
                  store_id: PSVKV4M16A
                  released_at: 2022-06-01 00:00:00
                  customer_unlock_code: 389123
              store_released_to_driver:
                summary: Webhook for when the store released the parcel to the driver.
                value:
                  tracking_id: NVSGBEDBP03784ADPL
                  store_id: PSVKV4M16A
                  released_at: 2022-06-01 00:00:00
        required: true
      responses:
        "202":
          description: Event successfully processed.
        "400":
          description: Validation error (the store doesn't exist or the list of tracking IDs is empty).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request PUT \
            'https://api-sandbox.ninjavan.co/sg/1.0/dp-order-events'
      x-codegen-request-body-name: body
  "/{countryCode}/1.0/public/price":
    x-summary: Get standard price
    post:
      tags:
        - Tariff API
      summary: Get price estimate
      description: |-
        Returns an estimated standard delivery fee for an order based on the provided `weight`, `service_level`, `from` and `to` locations, excluding any surcharge and discount. 

        **Note:** This endpoint doesn't require authentication but is rate-limited to 20 calls per minute.
      parameters:
        - name: countryCode
          in: path
          description: Country code. Only `ID` is supported.
          required: true
          schema:
            type: string
            enum:
              - ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriceEstimate"
              examples:
                sample-billing-zone:
                  value:
                    weight: 2.38
                    service_level: Standard
                    from:
                      l1_tier_code: ID_A00007_01
                      l2_tier_code: ID_B00069_01
                    to:
                      l1_tier_code: ID_A00022_01
                      l2_tier_code: ID_B00296_01
                sample-billing-zone-name:
                  value:
                    weight: 2.38
                    service_level: Standard
                    from:
                      l1_name: Jabodetabek
                      l2_name: Kab. Kepulauan Seribu
                      l3_name: Kepulauan Seribu Selatan
                    to:
                      l1_name: Kupang
                      l2_name: Kab. Kupang
                      l3_name: Amabi Oefeto
        required: true
      responses:
        "200":
          description: Obtained a price estimate successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      total_fee:
                        type: number
                        description: The estimated price. May be expressed in exponential notation.
                        example: 9E+4
        "404":
          description: Origin-Destination (OD) pair error. Cannot find a price estimate because the given from and to zone pair does not exist in the rate card. This may mean that the submitted zone codes are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  code: "1002"
                  request_id: "7a67b378-bf21-4de6-b982-3cb10ee5b1f6"
                  title: "No OD Pair in Script"
                  message: "Pricing Script and Billing Zones are present, but there's no existing OD pair"
  "/1.0/oauth/token":
    post:
      description: |
        Returns a new OAuth Bearer access token.

        The code can only be used once and will be invalid after.

        To generate an access token for the connected shipper during the initial connection and obtain a new access token seamlessly, without requiring the shipper to re-authenticate, when the token expires.

        Five minutes before the token expires, or if a request to a Ninja Van API returns an HTTP 401 status code, generate a new token.
      servers:
        - url: https://aaa.ninjavan.co
          description: Production OAuth API server
        - url: https://aaa-sandbox.ninjavan.co
          description: Sandbox OAuth API server
      tags:
        - Plugin APIs
      summary: OAuth API
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthTokenRequest"
      responses:
        "200":
          description: Access token was successfully generated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthTokenResponse"
        "400":
          description: Access token wasn't generated because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Access token wasn't generated because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  "/global/aaa/1.0/logout":
    post:
      description: |
        Invalidate access token and refresh token. This means that once you call this API, both tokens are no longer valid. Therefore, you should also remove the tokens cached on your end.

        To ensure the user's session termination, accurately reflecting their current status on our end. This helps prevent stale sessions for the shipper and minimizes the risk of unauthorized activities on their accounts.
      tags:
        - Plugin APIs
      summary: Logout API
      responses:
        "204":
          description: Access token and refresh token were successfully invalidated.
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request POST \
            --url 'https://api-sandbox.ninjavan.co/global/aaa/1.0/logout'
            --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
      x-summary: Invalidate access token

  "/{countryCode}/plugins/4.2/orders":
    post:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_CREATE_ORDER`

        Creates a new delivery order.

        To avoid creating duplicate orders, we recommend sending a `requested_tracking_number` so that the API can use it to generate the waybill tracking number.

        In some cases, requests may fail due to timeouts or temporary network issues (example, load balancer latency, routing problems, or service unavailability).

        We recommend implementing a retry mechanism for the following scenarios:
        * Request timeouts (no response received)
        * Temporary network or connection errors
        * 5xx server errors
      tags:
        - Plugin APIs
      summary: Order create API
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrderV4.2"
        required: false
      responses:
        "200":
          description: Order successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCreateResponseSuccess"
        "400":
          description: Order wasn't created because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                service-level-not-supported:
                  summary: Service level not supported
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: Service Level is not supported for this shipper account
                utf-extended-not-supported:
                  summary: UTF extended charset not supported
                  value:
                    error:
                      code: 127014
                      title: Bad Request
                      message: Invalid charset! UTF Extended charset is not supported
                duplicate-tracking-id:
                  summary: Duplicate tracking ID
                  value:
                    error:
                      code: 109201
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Duplicate Tracking ID
                      message: Tracking ID (123456789) has been used, please use a different tracking ID and try again
                invalid-timeslot:
                  summary: Invalid pickup or delivery time slot
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: Invalid timeslot provided. Please check the API docs for a list of valid time slots.
                invalid-contact-info:
                  summary: Contact information not provided
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "'Invalid contact information. Please provide either a 'email' or 'phone_number'."
                dimension-info-not-provided:
                  summary: Dimension information not provided
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          message: At least a form of dimension must be provided. Please check with your shipper support team to see which one you should be providing.
                          field: parcel_job.dimensions
                cod-not-configured:
                  summary: Cash on delivery not configured
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "Your account isn't configured for Cash on Delivery. Please check with your shipper support team on enabling this service."
                invalid-requested-tracking-number:
                  summary: Invalid requested tracking number
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "The 'requested_tracking_number' field must be between 1 and 9 characters (please do not pass a prefix), and can contain alphanumeric characters, and the (-) dash symbol."
                invalid-requested-tracking-prefix:
                  summary: Invalid requested tracking prefix
                  value:
                    error:
                      request_id: 1ba6da4f-0709-416e-9e30-a5546130b4d2
                      title: Invalid Data
                      message: Please check your request payload for validation errors.
                      details:
                        - reason: Validation Error
                          field: null
                          message: "The 'requested_tracking_number' field must start with the correct prefix."
        "500":
          description: Order wasn't created because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request POST 'https://api-sandbox.ninjavan.co/sg/plugins/4.2/orders' \
            --header 'Authorization: Bearer string' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "service_type": "Parcel",
              "service_level": "Standard",
              "requested_tracking_number": "1234-56789",
              "reference": {
                "merchant_order_number": "SHIP-1234-56789"
                },
              "from": {
                "name": "John Doe",
                "phone_number": "+60138201527",
                "email": "john.doe@gmail.com",
                "address": {
                  "address1": "17 Lorong Jambu 3",
                  "address2": "",
                  "area": "Taman Sri Delima",
                  "city": "Simpang Ampat",
                  "state": "Pulau Pinang",
                  "address_type": "office",
                  "country": "MY",
                  "postcode": "51200"
                  }
                },
                "to": {
                "name": "Jane Doe",
                "phone_number": "+60103067174",
                "email": "jane.doe@gmail.com",
                "address": {
                  "address1": "Jalan PJU 8/8",
                  "address2": "",
                  "area": "Damansara Perdana",
                  "city": "Petaling Jaya",
                  "state": "Selangor",
                  "address_type": "home",
                  "country": "MY",
                  "postcode": "47820"
                  }
                },
            "parcel_job": {
              "is_pickup_required": true,
              "pickup_service_type": "Scheduled",
              "pickup_service_level": "Standard",
              "pickup_date": "2021-12-15",
              "pickup_timeslot": {
                "start_time": "09:00",
                "end_time": "12:00",
                "timezone": "Asia/Kuala_Lumpur"
                },
              "pickup_instructions": "Pickup with care!",
              "delivery_instructions": "If recipient is not around, leave parcel in power riser.",
              "delivery_start_date": "2021-12-16",
              "delivery_timeslot": {
                "start_time": "09:00",
                "end_time": "22:00",
                "timezone": "Asia/Kuala_Lumpur"
                },
              "dimensions": {
                  "weight": 1.5
                },
              "items": [
                {
                  "item_description": "Sample description",
                  "quantity": 1,
                  "is_dangerous_good": false
                }
              ]
              }
            }'
      x-codegen-request-body-name: body

  "/{countryCode}/plugins/2.2/orders/{trackingNo}":
    delete:
      tags:
        - Plugin APIs
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_CANCEL_ORDER`

        Cancels an existing delivery order. Only orders that are Pending Pickup can be cancelled.
      summary: Order cancel API
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: trackingNo
          in: path
          description: The `tracking_number` that our API returned in the order creation response.
          required: true
          schema:
            minLength: 9
            pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
            type: string
      responses:
        "200":
          description: Order successfully cancelled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderResponse"
        "400":
          description: Order wasn't cancelled because of an issue with the request.
          content: {}
        "404":
          description: Order wasn't cancelled because no orders were found that matched the query parameters.
          content: {}
        "500":
          description: Order wasn't cancelled because of an issue with the server.
          content: {}
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request DELETE \
              'https://api-sandbox.ninjavan.co/sg/plugins/2.2/orders/:trackingNo' \
                --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
    x-summary: Cancel Order

  "/{countryCode}/plugins/2.0/waybills":
    get:
      tags:
        - Plugin APIs
      summary: Waybill API
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_GET_AWB`

        Generates a waybill for an order.

        You can generate a waybill only for an order that is successfully processed. After an order creation request is accepted by the order creation endpoint, the order goes into a queue for further processing. 
        When it's fully processed, the platform generates a Pending Pickup webhook (see [Sample webhook payloads](#section/Receive-a-webhook/Sample-webhook-payloads)). This webhook gives your system an indication that a waybill can be generated.

      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: tids
          in: query
          description: The `tracking_number` as generated by the Order API.
          required: true
          schema:
            minLength: 9
            pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
            type: string
        - name: hide_shipper_details
          in: query
          description: A flag for hiding shipper's details, such as contact information, on the waybill. If no flag is provided with the query, the details are hidden. To explicitly hide the details, set to `1`. To show the details, set to `0`.
          schema:
            maximum: 1
            minimum: 0
            type: integer
            format: int32
      responses:
        "200":
          description: Waybill successfully generated. A PDF file will be returned in the response.
          content: {}
        "400":
          description: Waybill wasn't generated because of an invalid request.
          content: {}
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request GET \
              'https://api-sandbox.ninjavan.co/sg/plugins/2.0/waybills?tids=:trackingNo&hide_shipper_details=1' \
                --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
    x-summary: Generate Waybill

  "/{countryCode}/plugins/2.0/shippers/settings":
    get:
      tags:
        - Plugin APIs
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_GET_SHIPPER_SETTINGS`

        To get shipper settings related to order creation and pickup to enhance the order creation process, providing a more seamless experience tailored to their enrolled service.
      summary: Shipper settings API
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      responses:
        "200":
          description: Shipper settings were successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShipperSettingResponse"
        "500":
          description: Shipper settings weren't returned because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request GET \
            --url 'https://api-sandbox.ninjavan.co/sg/plugins/2.0/shippers/settings'
            --header 'Authorization: Bearer string'
      x-codegen-request-body-name: body
      x-summary: Get shipper settings

  "/{countryCode}/plugins/2.1/shippers/webhooks":
    get:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_GET_SUBSCRIPTIONS`

        To fetch the list of webhook V2 event subscriptions for the shipper.
      tags:
        - Plugin APIs
      summary: Get webhook API (V2)
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request GET \
            --url 'https://api-sandbox.ninjavan.co/sg/plugins/2.1/shippers/webhooks'
            --header 'Authorization: Bearer string'
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      responses:
        "200":
          description: List of event subscriptions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookV2SubscriptionResponseArray"
    post:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_CREATE_SUBSCRIPTIONS`

        To subscribe to webhook V2 events on behalf of shippers, enabling the receipt of parcel status updates either at the plugin endpoints or shipper endpoints.
      tags:
        - Plugin APIs
      summary: Create webhook API (V2)
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request POST 'https://api.ninjavan.co/sg/plugins/2.1/shippers/webhooks' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer string' \
            --data-raw '{
                "event": "Pending Pickup"
                "version": "2.0"
                "uri": "https://webhook-subscription-endpoint.com"
            }'
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookV2Subscription"
      responses:
        "200":
          description: Webhook event subscription successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookV2SubscriptionResponse"
        "400":
          description: Webhook event subscription wasn't created because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  "/{countryCode}/plugins/2.1/shippers/webhooks/{webhookSubscriptionId}":
    delete:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_DELETE_SUBSCRIPTIONS`

        To remove subscriptions for the shipper. Only subscriptions created through plugin can be deleted.

      tags:
        - Plugin APIs
      summary: Delete webhook API (V2)
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request DELETE \
            --url 'https://api-sandbox.ninjavan.co/sg/plugins/2.1/shippers/webhooks/81ce5319-c0a0-4cd7-8e63-9128c29c569c'
            --header 'Authorization: Bearer string'
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
        - name: webhookSubscriptionId
          in: path
          description: UUID of webhook subscription to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Webhook event subscription successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookV2SubscriptionResponse"
        "401":
          description: Authorized shipper ID does not own the subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Webhook event subscription wasn't deleted as it can't be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  "/{countryCode}/plugins/2.0/shippers/event-subscriptions/webhook":
    get:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_GET_SUBSCRIPTIONS`

        To fetch the list of webhook V1 event subscriptions for the shipper.
      tags:
        - Plugin APIs
      summary: Get webhook API (Deprecated)
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request GET \
            --url 'https://api-sandbox.ninjavan.co/sg/plugins/2.0/shippers/event-subscriptions/webhook'
            --header 'Authorization: Bearer string'
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      responses:
        "200":
          description: List of event subscriptions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscriptionResponse"
                example:
                  - id: 1
                    shipper_id: 123
                    event: "Pending Pickup"
                    version: "1.2"
                    internal: false
                    protocol: "HTTP"
                    method: "POST"
                    uri: "https://webhook-subscription-endpoint.com"
                    transformer_class: ""
                    enable_custom_webhook: false
                    hooks_enabled: false
                    on_request_generate_hook: ""
                    on_response_received_hook: ""
                  - id: 2
                    shipper_id: 123
                    event: "Completed"
                    version: "1.2"
                    internal: false
                    protocol: "HTTP"
                    method: "POST"
                    uri: "https://webhook-subscription-endpoint.com"
                    transformer_class: ""
                    enable_custom_webhook: false
                    hooks_enabled: false
                    on_request_generate_hook: ""
                    on_response_received_hook: ""

    post:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_CREATE_SUBSCRIPTIONS`

        To subscribe to webhook V1 events on behalf of shippers, enabling the receipt of parcel status updates either at the plugin endpoints or shipper endpoints.
      tags:
        - Plugin APIs
      summary: Create webhook API (Deprecated)
      x-codeSamples:
        - lang: "cURL"
          label: "curl"
          source: |
            curl --location --request POST 'https://api.ninjavan.co/sg/plugins/2.0/shippers/event-subscriptions/webhook' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer string' \
            --data-raw '{
                "event": "Successful Delivery",
                "version": "1.2",
                "internal": false,
                "protocol": "HTTP",
                "method": "POST",
                "uri": "https://webhook-subscription-endpoint.com",
                "enable_custom_webhook": false,
                "hooks_enabled":false
            }'
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventSubscriptionRequest"
      responses:
        "200":
          description: Webhook event subscription successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscriptionResponse"
                example:
                  - id: 1
                    shipper_id: 123
                    event: "Pending Pickup"
                    version: "1.2"
                    internal: false
                    protocol: "HTTP"
                    method: "POST"
                    uri: "https://webhook-subscription-endpoint.com"
                    transformer_class: ""
                    enable_custom_webhook: false
                    hooks_enabled: false
                    on_request_generate_hook: ""
                    on_response_received_hook: ""
        "400":
          description: Webhook event subscription wasn't created because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  "/{countryCode}/plugins/2.0/shippers/event-subscriptions/{event_subscription_id}":
    delete:
      description: |
        Required scope: `SHIPPER_PUBLIC_APIS_DELETE_SUBSCRIPTIONS`

        Deletes existing webhook V1 event subscriptions by the plugin.
      tags:
        - Plugin APIs
      summary: Delete webhook API (Deprecated)
      parameters:
        - name: Authorization
          in: header
          description: Your Bearer token.
          required: true
          schema:
            type: string
        - name: event_subscription_id
          in: path
          description: The `id` that our API returned in the get event subscriptions response.
          required: true
          schema:
            type: string
        - name: countryCode
          in: path
          description: Country code.
          required: true
          schema:
            type: string
            enum:
              - SG
              - MY
              - TH
              - ID
              - VN
              - PH
              - MM
      responses:
        "200":
          description: Webhook event subscription successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscriptionResponse"
                example:
                  - id: 1
                    shipper_id: 123
                    event: "Pending Pickup"
                    version: "1.2"
                    internal: false
                    protocol: "HTTP"
                    method: "POST"
                    uri: "https://webhook-subscription-endpoint.com"
                    transformer_class: ""
                    enable_custom_webhook: false
                    hooks_enabled: false
                    on_request_generate_hook: ""
                    on_response_received_hook: ""
        "400":
          description: Webhook event subscription wasn't deleted because of an issue with the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Webhook event subscription wasn't deleted because no event subscriptions were found that matched the query parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Webhook event subscription wasn't deleted because of an issue with the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-code-samples:
        - lang: curl
          source: |-
            curl --location --request DELETE \
              'https://api-sandbox.ninjavan.co/sg/plugins/2.0/shippers/event-subscriptions/{event_subscription_id}  \
                --header 'Authorization: Bearer string'

components:
  schemas:
    B2BOrder:
      type: object
      required:
        - documents_required
      properties:
        documents_required:
          type: array
          description: Specifies the documents required to be processed as part of the delivery. Accepted values are `RDO` and `GRN`. If no documents are required, then an empty array should be passed in.
          example: ["RDO"]
          items:
            type: string
        document_return_address:
          type: object
          description: |-
            Return Document Order (RDO) recipient's information. Used for the following:
            * Specify an RDO delivery destination that is different from the `from` address in the B2B bundle.
            * Contact details for informing the recipient regarding parcel updates.
            * Address details to be printed on the RDO waybill.

            **Remark:**
            * The `tracking_number` for an RDO is automatically generated using the format: `tracking_number`-DO
            * The field `document_return_address` is only applicable in the following countries: Indonesia (ID), Malaysia (MY), Vietnam (VN), and the Philippines (PH). If used in other country environments, this field will be ignored
          allOf:
            - $ref: "#/components/schemas/NewSender"
      example:
        documents_required: ["RDO"]
        document_return_address:
          name: John Doe
          phone_number: "+60138201527"
          email: jane.doe@gmail.com
          address:
            address1: 17 Lorong Jambu 3
            address2: ""
            area: Taman Sri Delima
            city: Simpang Ampat
            state: Pulau Pinang
            address_type: office
            country: MY
            postcode: "51200"
        
      description: Required if the order type is `B2B Bundle`.
    BundleOrder:
      required:
        - total_quantity
      type: object
      properties:
        total_quantity:
          type: number
          description: Specifies the total number of pieces to be delivered as part of this order
          example: 2
        requested_piece_tracking_numbers:
          description: |-
            Required only when using multi-fixed or multi-dynamic prefixes. To determine your prefix type, please contact your account manager.
            Specifies the tracking number of the pieces associated with the order. The number of requested piece tracking numbers passed in this field must be equal to the number specified under `total_quantity`.

            The same validation and generation logic from `requested_tracking_number` applies on each requested piece tracking number that is passed in. 

            Difference from `requested_tracking_number`:
            * `requested_tracking_number` Specifies the tracking number for the entire order.
            * `requested_piece_tracking_numbers` Specifies the tracking numbers for each individual piece within the order.
          type: array
          items:
            type: string
          example: ["MYTRACKING1234", "MYTRACKING1235"]
      description: Required if the order type is `B2B Bundle`. Please note that all parcel information (weight, dimension, merchant_order_number) are replicated across all pieces created as part of this order. Please also note that each piece will have a tracking id generated and the waybill must contain this tracking number
    MarketplaceOrder:
      required:
        - seller_company_name
        - seller_id
      type: object
      properties:
        seller_id:
          maxLength: 255
          minLength: 1
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
          type: string
          description: "External reference for the marketplace seller. If your platform is a marketplace, and you are creating an order for a seller on your platform, pass the unique seller ID in this field."
          example: John-Doe-Shop
        seller_company_name:
          maxLength: 255
          minLength: 2
          type: string
          description: Company name of this marketplace seller.
          example: John Doe Shop
      description: Required if the order type is `Marketplace`.
    CorporateOrder:
      required:
        - branch_id
      type: object
      properties:
        branch_id:
          maxLength: 255
          minLength: 1
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
          type: string
          description: "External reference for the corporate branch."
          example: Branch-1234
      description: Required if the order type is `Corporate`.
    InternationalOrder:
      required:
        - portation
      type: object
      properties:
        portation:
          type: string
          description: |-
            For orders with goods that have been or need to be imported into the country, whether by a forwarder or by Ninja Van, set `Import` as the portation type.

            For orders that require goods to be exported by Ninja Van to another country, set `Export` as the portation type.
          enum:
            - Import
            - Export
          example: Import
      description: Details specific to cross-border shipments.
    ExperimentalCustomsDeclaration:
      type: object
      properties:
        customs_description:
          type: string
          maxLength: 255
          description: |-
            Details of goods imported or exported.
          example: men’s shirts
        native_customs_description:
          type: string
          description: |-
            Details of goods in native language.
          example: 男人衬衫
        goods_currency:
          type: string
          description: |-
            Currency of goods value.
          example: USD
        goods_value:
          type: string
          description: |-
            Goods value for customs declaration.
          example: "15.99"
        battery_type:
          type: string
          description: |-
            Battery type.
          example: No Battery
        battery_packing:
          type: string
          description: |-
            Battery package.
          example: No Battery
        hs_code:
          type: string
          description: |-
            Harmonized System (HS) code to determine the type of goods and their associated tax rate.
          example: "543111"
        trade_terms:
          type: string
          description: |-
            Trade terms.
          example: DDU
        invoice_url:
          type: string
          description: |-
            Invoice URL.
          example: www.invoice.com/12345.pdf
      description: Details specific to cross-border shipments. Applies only to `International` orders.
    NewSender:
      required:
        - address
        - email
        - name
        - phone_number
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 3
          type: string
          example: John Doe
        phone_number:
          maxLength: 32
          minLength: 6
          type: string
          description: |-
            Phone number of the contact.

            The API attempts to format the number based on the E.164 format, using the country code of the address provided. If it can be formatted, then the number is considered valid.

            The API only requires that either the `email` or `phone_number` is valid.
          example: "+6563337193"
        email:
          type: string
          description: |-
            Email address of the contact.

            Must be a valid email address format. The formal definitions are in RFC 5322 (sections 3.2.3 and 3.4.1) and RFC 5321, with a more readable form given in the informational RFC 3696 and the associated errata.

            The API only requires that either the `email` or `phone_number` is valid. If an email is provided, the API validates it and returns an error if the validation fails.
          format: email
          example: john.doe@mail.com
        address:
          $ref: "#/components/schemas/NewAddress"
        collection_point:
          type: string
          description: "This field is experimental."
          enum:
            - Ninja PUDO @ Orchard
            - Ninja PUDO @ NUH
    NewRecipient:
      required:
        - address
        - email
        - name
        - phone_number
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 3
          type: string
          example: Jane Doe
        phone_number:
          maxLength: 32
          minLength: 6
          type: string
          description: |-
            Phone number of the contact.

            The API attempts to format the number based on the E.164 format, using the country code of the address provided. If it can be formatted, then the number is considered valid.

            The API only requires that either the `email` or `phone_number` is valid.
          example: "+6502700553"
        email:
          type: string
          description: |-
            Email address of the contact.

            Must be a valid email address format. The formal definitions are in RFC 5322 (sections 3.2.3 and 3.4.1) and RFC 5321, with a more readable form given in the informational RFC 3696 and the associated errata.

            The API only requires that either the `email` or `phone_number` is valid. If an email is provided, the API validates it and returns an error if the validation fails.
          format: email
          example: jane.doe@mail.com
        address:
          $ref: "#/components/schemas/NewAddress"
        collection_point:
          type: string
          description: "This field is experimental."
          enum:
            - Ninja PUDO @ Orchard
            - Ninja PUDO @ NUH
    ParcelJob:
      required:
        - delivery_start_date
        - delivery_timeslot
        - is_pickup_required
      type: object
      properties:
        delivery_start_date:
          pattern: '^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$'
          type: string
          description: |-
            Specifies the start date of the delivery period in the `yyyy-MM-dd` format. For example, for standard orders that take 3 days, if the `delivery_start_date` is on `2021-12-15`, the delivery will be attempted at any time from `2021-12-15` to `2021-12-17`.

            The API automatically adjust the date for blocked dates. Double check for the adjusted `delivery_start_date` in response.

            If an order is created before the cutoff time, the API defaults `delivery_start_date` to the same day, if that day is not a blocked date. Otherwise, `delivery_start_date` is defaulted to the next available date.
        delivery_timeslot:
          $ref: "#/components/schemas/DeliveryTimeslotInfo"
        delivery_instructions:
          type: string
          description: Delivery instructions for the driver.
        items:
          type: array
          description: |-
            Number of items in the list cannot exceed 200.
          items:
            $ref: "#/components/schemas/Items"
        allow_self_collection:
          type: boolean
          description: |-
            Indicates whether the customer is allowed to self-collect the parcels.
            *Required* if a valid delivery collection point (`to.collection_point`) is specified.
        allow_weekend_delivery:
          type: boolean
          description: Specifies whether deliveries can be attempted on weekends.
          default: true
        cash_on_delivery:
          type: number
          description: Specifies the amount of cash to be collected from the recipient upon delivery.
          format: double
        insured_value:
          type: number
          description: Specifies the desired insured value of the parcel.
          format: double
        dimensions:
          $ref: "#/components/schemas/Dimension"
        is_pickup_required:
          type: boolean
          description: |-
            Indicates whether a pickup reservation is required.
            If set to `true`, the system checks if a pickup reservation exists with the same:
            * `pickup_date`
            * Pickup address (inferred from the `parcel_job.pickup_address` or `from.address`)

            The system creates a new pickup reservation if none exists for the current pickup date and address.

            To update the pickup address for a specific `pickup_address_slot_id`, use one of these options:
            * Call Ninja Van's shipper support hotline.
            * Send a new order with an updated pickup address.
                * The pickup address specified in either the `from` or `pickup_address` field will be used to update the address.
                
                * Existing pickup reservations, that are already in progress, won't be modified in any way.
                
                * You account can be configured to _not_ update future pickup reservation addresses even if the address has changed.

            To update the pickup time slot for a specific pickup reservation, please call Ninja Van's shipper support hotline.

            For more details, refer to the notes for the `pickup_timeslot` field.

            If you require a `Scheduled` pickup, then provide the following fields:
            * `pickup_date`
            * `pickup_timeslot`
            * `pickup_approximate_volume`
          default: false
      discriminator:
        propertyName: is_pickup_required
        mapping:
          "false": "#/components/schemas/NoPickupInfo"
          "true": "#/components/schemas/PickupInfo"
    NoPickupInfo:
      type: object
      allOf:
        - $ref: "#/components/schemas/ParcelJob"
    PickupInfo:
      allOf:
        - $ref: "#/components/schemas/ParcelJob"
        - type: object
          properties:
            pickup_service_type:
              type: string
              description: |-
                Specifies the pickup service type.
              default: Scheduled
            pickup_service_level:
              type: string
              description: |-
                Specifies the pickup service level. You have the option of choosing `Standard` or `Premium` levels.

                Premium pickups have shorter pickup time slots, and the cutoff rules are more relaxed. Check with your Account Manager to see if your account is eligible for Premium pickups.
              default: Standard
              enum:
                - Standard
                - Premium
            pickup_address:
              $ref: "#/components/schemas/NewSender"
            pickup_date:
              pattern: '^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$'
              type: string
              description: |-
                Specifies the date on which the pickup will occur in the `yyyy-MM-dd` format.

                The system will adjust the pickup date automatically to the next available working day, if the specified pickup date:
                * Falls on a blocked date. For example, a public holiday or warehouse closure.
                * Doesn't meet the cutoff time for pickup bookings for that day.

                Any adjustments to the pickup date are returned in the response.
            pickup_timeslot:
              $ref: "#/components/schemas/PickupTimeslotInfo"
            pickup_approximate_volume:
              type: string
              default: Less than 3 Parcels
              enum:
                - Full-Van Load
                - Half-Van Load
                - Larger than Van Load
                - Less than 10 Parcels
                - Less than 3 Parcels
                - Trolley Required
            pickup_instructions:
              type: string
              description: Instruction to driver for pickup attempts.
    NewAddress:
      required:
        - address1
        - country
      oneOf:
        - $ref: "#/components/schemas/MalaysiaAddress"
        - $ref: "#/components/schemas/IndonesiaAddress"
        - $ref: "#/components/schemas/MyanmarAddress"
        - $ref: "#/components/schemas/PhilippinesAddress"
        - $ref: "#/components/schemas/SingaporeAddress"
        - $ref: "#/components/schemas/ThailandAddress"
        - $ref: "#/components/schemas/VietnamAddress"
      properties:
        country:
          $ref: "#/components/schemas/CountryCode"
        address1:
          type: string
          example: 17 Lorong Jambu 3
          description: "If you are collecting granular address information, concatenate the building number, building name, and street information in this field."
        address2:
          type: string
          example: ""
        address_type:
          $ref: "#/components/schemas/AddressType"
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
    IndonesiaAddress:
      type: object
      properties:
        kelurahan:
          type: string
          description: For ID addresses.
        kecamatan:
          type: string
          description: For ID addresses.
        city:
          type: string
          description: For ID addresses.
        province:
          type: string
          description: For ID addresses.
        postcode:
          type: string
          description: Postal code for ID addresses.
      description: Indonesia-specific address fields.
      example:
        kelurahan: Kelurahan Gambir
        kecamatan: Kecamatan Gambir
        city: Jakarta Selatan
        province: Jakarta
        postcode: "10110"
    MyanmarAddress:
      required:
        - postcode
      type: object
      properties:
        township:
          type: string
          description: For MM addresses.
        district:
          type: string
          description: For MM addresses.
        state:
          type: string
          description: For MM addresses.
        postcode:
          type: string
          description: Postal code for MM addresses.
      description: Myanmar-specific address fields.
      example:
        township: San Lorenzo South Subdivision
        district: Malitlit
        state: LAGUNA
        postcode: "4026"
    MalaysiaAddress:
      required:
        - postcode
      type: object
      properties:
        area:
          type: string
          description: For MY addresses.
        city:
          type: string
          description: For MY addresses.
        state:
          type: string
          description: For MY addresses.
        postcode:
          type: string
          description: Postal-code for MY addresses.
      description: Malaysia-specific address fields.
      example:
        area: Taman Sri Delima
        city: Simpang Ampat
        state: Pulau Pinang
        postcode: "51200"
    PhilippinesAddress:
      type: object
      properties:
        subdivision:
          type: string
          description: For PH addresses.
        district:
          type: string
          description: For PH addresses.
        city:
          type: string
          description: For PH addresses.
        province:
          type: string
          description: For PH addresses.
        postcode:
          type: string
          description: Postal code for PH addresses.
      description: Philippines-specific address fields.
      example:
        subdivision: San Lorenzo South Subdivision
        district: Malitlit
        city: Santa Rosa
        province: LAGUNA
        postcode: "4026"
    SingaporeAddress:
      required:
        - postcode
      type: object
      properties:
        postcode:
          type: string
          description: Postal code for SG addresses.
      description: Singapore-specific address fields.
    ThailandAddress:
      required:
        - postcode
      type: object
      properties:
        sub_district:
          type: string
          description: For TH addresses.
        district:
          type: string
          description: For TH addresses.
        province:
          type: string
          description: For TH addresses.
        postcode:
          type: string
          description: Postal code for TH addresses.
      description: Thailand-specific address fields.
      example:
        sub_district: Bangyai
        district: Bangyai
        province: Nonthaburi
        postcode: "11140"
    VietnamAddress:
      type: object
      properties:
        ward:
          type: string
          description: For VN addresses. Here, enter the name of a ward in an urban district (such as "Phường Nguyễn Du" or "Phường 4"), or a provincial district-level sub-division (such as "Huyện Long Thành").
        district:
          type: string
          description: For VN addresses. Here, enter the name of a provincial city (such as "Thành phố Biên Hòa"), or an urban district (such as "Quận Hai Bà Trưng" in Hanoi or "Quận 4" in Ho Chi Minh).
        city:
          type: string
          description: For VN addresses. Here, enter the name of a municipality (such as "Thành phố Hà Nội" or "Thành phố Hồ Chí Minh") or a province (such as "Tỉnh Đồng Nai").
      description: Vietnam-specific address fields.
      example:
        ward: Phường Nguyễn Du
        district: Quận Hai Bà Trưng
        city: Thành phố Hà Nội
    CountryCode:
      type: string
      example: MY
      enum:
        - SG
        - MY
        - TH
        - ID
        - VN
        - PH
        - MM
    AddressType:
      type: string
      description: Indicates the type of address. The value must be either `home` or `office`.
      example: office
      enum:
        - home
        - office
    ServiceType:
      type: string
      description: Indicates the type of service. Used to inform Ninja Van on what jobs to schedule for this order.
      enum:
        - Parcel
        - Marketplace
        - Corporate
        - International
        - Marketplace International
        - Corporate International
        - Bulky
        - Document
        - Return
        - Marketplace Return
        - Corporate Return
        - B2B Bundle
        - Corporate B2B Bundle
        - International B2B Bundle
    ServiceLevel:
      type: string
      description: |-
        Shipment service level.

        **Note:** Only `Standard` is supported for `International`-type orders.
      enum:
        - Standard
        - Express
        - Sameday
        - Nextday
    DeliveryTimeslotInfo:
      required:
        - end_time
        - start_time
        - timezone
      type: object
      properties:
        start_time:
          pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
          type: string
        end_time:
          pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
          type: string
        timezone:
          $ref: "#/components/schemas/Timezone"
      description: |-
        Delivery time slot information. The valid time slots are:

          * "09:00" to "12:00"
          * "09:00" to "18:00"
          * "09:00" to "22:00"
          * "12:00" to "15:00"
          * "15:00" to "18:00"
          * "18:00" to "22:00"

        **Note:** Timezone must reflect the local timezone of the target country.

    PickupTimeslotInfo:
      required:
        - end_time
        - start_time
      type: object
      properties:
        start_time:
          pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
          type: string
        end_time:
          pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"
          type: string
        timezone:
          $ref: "#/components/schemas/Timezone"
      description: |-
        Pickup time slot information. The valid time slots are:

          * "09:00" to "12:00"
          * "09:00" to "18:00"
          * "09:00" to "22:00"
          * "12:00" to "15:00"
          * "15:00" to "18:00"
          * "18:00" to "22:00"

        When scheduling a pickup, keep in mind our cutoff rules for the Standard and Premium service levels.

        Standard service level:
        * If you created an order before the cutoff time, but the pickup end time is less than 3 hours from now, then the pickup will roll over to the next working day.
        * If you created an order before the cutoff time, and the pickup end time is 3 hours or more from now, then the pickup can be created on the same day.
        * If you created an order after the cutoff time, then the pickup will roll over to the next working day.

        Premium service level:
        * If you created an order before the cutoff time, but the pickup end time is less than 90 minutes from now, then the pickup request will fail.
        * If you created an order before the cutoff time, and the pickup end time is 90 minutes or more from now, then the pickup can be created on the same day.
        * If you created an order after the cutoff time, then the pickup will rollover to next working day.

        **Note:** If you're unsure what the cutoff time is, check with your Account Manager. Please ensure that the timezone corresponds to the local time of the specified country.

    NewOrderV4.2:
      required:
        - from
        - parcel_job
        - service_level
        - service_type
        - to
      type: object
      discriminator:
        propertyName: service_type
        mapping:
          Parcel: "#/components/schemas/Parcel4.2"
          Marketplace: "#/components/schemas/Marketplace4.2"
          Corporate: "#/components/schemas/Corporate4.2"
          International: "#/components/schemas/International4.2"
          Marketplace International: "#/components/schemas/MarketplaceInternational4.2"
          Corporate International: "#/components/schemas/CorporateInternational4.2"
          Document: "#/components/schemas/Parcel4.2"
          Return: "#/components/schemas/Parcel4.2"
          Marketplace Return: "#/components/schemas/Marketplace4.2"
          Corporate Return: "#/components/schemas/Corporate4.2"
          B2B Bundle: "#/components/schemas/B2BBundle4.2"
          Corporate B2B Bundle: "#/components/schemas/CorpB2BBundle4.2"
          International B2B Bundle: "#/components/schemas/InternationalB2BBundle4.2"
      properties:
        service_type:
          $ref: "#/components/schemas/ServiceType"
        service_level:
          $ref: "#/components/schemas/ServiceLevel"
        requested_tracking_number:
          minLength: 9
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
          type: string
          description: |-
            If your shipper account is a prefixless account or multiple prefixes account, then `requested_tracking_number` is _required_.

            If your shipper account has a tracking number prefix configured, then the API concatenates your prefix with the `requested_tracking_number` to generate the waybill tracking number.

            If `requested_tracking_number` isn't provided, then the API automatically generates a random tracking number and concatenates your prefix with it to generate the waybill tracking number. 
                          
            A generic prefix is used for this request, if your account does not have a prefix _and_ if the `requested_tracking_number` is not provided.

            The total length of the generated `tracking_number` is further validated based on your shipper settings. 
                          
            The default length for `tracking_number` is around 18 characters. If the `requested_tracking_number` is too short, the API auto-pads the value with zeros (`0`). 
                          
            Check with us if you have any questions regarding your shipper account settings.
        reference:
          type: object
          properties:
            merchant_order_number:
              maxLength: 255
              type: string
              description: Identifier of the order in shipper's systems.
          description: "Reference information. This information returns to the shipper via webhooks, and can be used as query parameters when retrieving orders from our API."
        from:
          type: object
          description: |-
            Sender's information. Used for the following:
            * Contact details for informing the sender regarding parcel updates.
            * Address details to be printed on the waybill.
          allOf:
            - $ref: "#/components/schemas/NewSender"
        to:
          type: object
          description: |-
            Recipient's information. Used for the following:
            * Delivery destination.
            * Contact details for informing the recipient regarding parcel updates.
            * Address details to be printed on the waybill.
          allOf:
            - $ref: "#/components/schemas/NewRecipient"
        parcel_job:
          type: object
          description: |-
            Details of the parcel's pickup and delivery jobs.

            If no pickup address is provided, Ninja Van uses the default pickup address specified in the shipper pickup reservation settings.
          allOf:
            - $ref: "#/components/schemas/ParcelJob4.2"
      example:
        service_type: Parcel
        service_level: Standard
        requested_tracking_number: 1234-56789
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+60138201527"
          email: john.doe@gmail.com
          address:
            address1: 17 Lorong Jambu 3
            address2: ""
            area: Taman Sri Delima
            city: Simpang Ampat
            state: Pulau Pinang
            address_type: office
            country: MY
            postcode: "51200"
        to:
          name: Jane Doe
          phone_number: "+60103067174"
          email: jane.doe@gmail.com
          address:
            address1: Jalan PJU 8/8
            address2: ""
            area: Damansara Perdana
            city: Petaling Jaya
            state: Selangor
            address_type: home
            country: MY
            postcode: "47820"
        parcel_job:
          is_pickup_required: true
          pickup_service_type: Scheduled
          pickup_service_level: Standard
          pickup_date: "2021-12-15"
          pickup_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Kuala_Lumpur
          pickup_instructions: Pickup with care!
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          delivery_start_date: "2021-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Kuala_Lumpur
          dimensions:
            weight: 1.5
          items:
            - item_description: Sample description
              quantity: 1
              is_dangerous_good: false
    Parcel4.2:
      type: object
      description: Parcel service representation
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
    Marketplace4.2:
      type: object
      description: marketplace order representation
      required:
        - marketplace
      properties:
        marketplace:
          $ref: "#/components/schemas/MarketplaceOrder"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
    Corporate4.2:
      type: object
      description: corporate order representation
      required:
        - corporate
      properties:
        corporate:
          $ref: "#/components/schemas/CorporateOrder"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
    International4.2:
      type: object
      description: international order representation
      required:
        - international
        - customs_declaration
      properties:
        service_type:
          $ref: "#/components/schemas/ServiceType"
        international:
          $ref: "#/components/schemas/InternationalOrder4.2"
        customs_declaration:
          $ref: "#/components/schemas/CustomsDeclaration4.2"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
      example:
        service_type: International
        international:
          portation: Import
          service_code: CNSG0015
        customs_declaration:
          goods_currency: SGD
          battery_type: No Battery
          battery_packing: No Battery
          trade_terms: DDU
          is_gst_included_in_goods_value: true
          gst_registration_number: M212345678
        service_level: Standard
        requested_tracking_number: 1234-56789
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+86138201527"
          email: john.doe@gmail.com
          address:
            address1: No. 39 Tianxing Road, Huangjiang Town
            address2: ""
            city: Dongguan City
            state: Guangdong
            address_type: office
            country: CN
            postcode: "523516"
        to:
          required: true
          name: Jane Doe
          phone_number: "+6502700553"
          email: jane.doe@gmail.com
          address:
            required: true
            address1: 69 Lorong 6 Geylang
            address2: ""
            country: SG
            postcode: "399221"
        parcel_job:
          is_pickup_required: false
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          delivery_start_date: "2023-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Singapore
          dimensions:
            weight: 1.5
          items:
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 15.99
              unit_weight: 1.5
              product_url: https://www.product.url/12345.pdf
              invoice_url: https://www.invoice.url/12345.pdf
              hs_code: 543111
              made_in_country: CN
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 5.99
              unit_weight: 1.0
              product_url: https://www.product.url/12346.pdf
              invoice_url: https://www.invoice.url/12346.pdf
              hs_code: 543111
              made_in_country: CN
    B2BBundle4.2:
      type: object
      description: B2B Bundle order representation
      required:
        - b2b
        - bundle_information
      properties:
        b2b:
          $ref: "#/components/schemas/B2BOrder"
        bundle_information:
          $ref: "#/components/schemas/BundleOrder"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
    CorpB2BBundle4.2:
      type: object
      description: Corporate B2B Bundle order representation
      required:
        - b2b
        - bundle_information
        - corporate
      properties:
        b2b:
          $ref: "#/components/schemas/B2BOrder"
        bundle_information:
          $ref: "#/components/schemas/BundleOrder"
        corporate:
          $ref: "#/components/schemas/CorporateOrder"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
    InternationalB2BBundle4.2:
      type: object
      description: B2B Bundle order representation
      required:
        - b2b
        - bundle_information
        - international
        - customs_declaration
      properties:
        
        b2b:
          $ref: "#/components/schemas/B2BOrder"
        bundle_information:
          $ref: "#/components/schemas/BundleOrder"
        international:
          $ref: "#/components/schemas/InternationalOrder4.2"
        customs_declaration:
          $ref: "#/components/schemas/CustomsDeclarationForB2BBundle"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
      example:
        service_type: International B2B Bundle
        b2b:
          documents_required:
            - RDO
          document_return_address:
            name: John Doe
            phone_number: "+60138201527"
            email: jane.doe@gmail.com
            address:
              address1: 17 Lorong Jambu 3
              address2: ""
              area: Taman Sri Delima
              city: Simpang Ampat
              state: Pulau Pinang
              address_type: office
              country: MY
              postcode: "51200"
        bundle_information:
          total_quantity: 2
          requested_piece_tracking_numbers:
            - MYTRACKING1234
            - MYTRACKING1235
        international:
          portation: Import
          service_code: CNSG0015
        customs_declaration:
          customs_description: Men's T-shirts
          goods_value: 200
          goods_currency: SGD
          battery_type: No Battery
          battery_packing: No Battery
          trade_terms: DDU
          is_gst_included_in_goods_value: true
          gst_registration_number: M212345678
          hs_code: "543111"
        service_level: Standard
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+86138201527"
          email: john.doe@gmail.com
          address:
            address1: No. 39 Tianxing Road, Huangjiang Town
            address2: ""
            city: Dongguan City
            state: Guangdong
            address_type: office
            country: CN
            postcode: "523516"
        to:
          name: Jane Doe
          phone_number: "+6502700553"
          email: jane.doe@gmail.com
          address:
            address1: 69 Lorong 6 Geylang
            address2: ""
            country: SG
            postcode: "399221"
        parcel_job:
          is_pickup_required: false
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          delivery_start_date: "2023-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Singapore
          dimensions:
            weight: 1.5
    MarketplaceInternational4.2:
      type: object
      description: marketplace international order representation
      required:
        - international
        - customs_declaration
        - marketplace
      properties:
        service_type:
          $ref: "#/components/schemas/ServiceType"
        marketplace:
          $ref: "#/components/schemas/MarketplaceOrder"
        international:
          $ref: "#/components/schemas/InternationalOrder4.2"
        customs_declaration:
          $ref: "#/components/schemas/CustomsDeclaration4.2"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
      example:
        service_type: Marketplace International
        marketplace:
          seller_id: John-Doe-Shop
          seller_company_name: John Doe Shop
        international:
          portation: Import
          service_code: CNSG0015
        customs_declaration:
          goods_currency: SGD
          battery_type: No Battery
          battery_packing: No Battery
          trade_terms: DDU
          is_gst_included_in_goods_value: true
          gst_registration_number: M212345678
        service_level: Standard
        requested_tracking_number: 1234-56789
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+86138201527"
          email: john.doe@gmail.com
          address:
            address1: No. 39 Tianxing Road, Huangjiang Town
            address2: ""
            city: Dongguan City
            state: Guangdong
            address_type: office
            country: CN
            postcode: "523516"
        to:
          name: Jane Doe
          phone_number: "+6502700553"
          email: jane.doe@gmail.com
          address:
            address1: 69 Lorong 6 Geylang
            address2: ""
            country: SG
            postcode: "399221"
        parcel_job:
          is_pickup_required: false
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          delivery_start_date: "2023-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Singapore
          dimensions:
            weight: 1.5
          items:
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 15.99
              unit_weight: 1.5
              product_url: https://www.product.url/12345.pdf
              invoice_url: https://www.invoice.url/12345.pdf
              hs_code: 543111
              made_in_country: CN
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 5.99
              unit_weight: 1.0
              product_url: https://www.product.url/12346.pdf
              invoice_url: https://www.invoice.url/12346.pdf
              hs_code: 543111
              made_in_country: CN
    CorporateInternational4.2:
      type: object
      description: corporate international order representation
      required:
        - international
        - customs_declaration
        - corporate
      properties:
        service_type:
          $ref: "#/components/schemas/ServiceType"
        corporate:
          $ref: "#/components/schemas/CorporateOrder"
        international:
          $ref: "#/components/schemas/InternationalOrder4.2"
        customs_declaration:
          $ref: "#/components/schemas/CustomsDeclaration4.2"
      allOf:
        - $ref: "#/components/schemas/NewOrderV4.2"
      example:
        service_type: Corporate International
        corporate:
          branch_id: Branch-1234
        international:
          portation: Import
          service_code: CNSG0015
        customs_declaration:
          goods_currency: SGD
          battery_type: No Battery
          battery_packing: No Battery
          trade_terms: DDU
          is_gst_included_in_goods_value: true
          gst_registration_number: M212345678
        service_level: Standard
        requested_tracking_number: 1234-56789
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+86138201527"
          email: john.doe@gmail.com
          address:
            address1: No. 39 Tianxing Road, Huangjiang Town
            address2: ""
            city: Dongguan City
            state: Guangdong
            address_type: office
            country: CN
            postcode: "523516"
        to:
          name: Jane Doe
          phone_number: "+6502700553"
          email: jane.doe@gmail.com
          address:
            address1: 69 Lorong 6 Geylang
            address2: ""
            country: SG
            postcode: "399221"
        parcel_job:
          is_pickup_required: false
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          delivery_start_date: "2023-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Singapore
          dimensions:
            weight: 1.5
          items:
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 15.99
              unit_weight: 1.5
              product_url: https://www.product.url/12345.pdf
              invoice_url: https://www.invoice.url/12345.pdf
              hs_code: 543111
              made_in_country: CN
            - item_description: men's shirts
              native_item_description: 男人衬衫
              unit_value: 5.99
              unit_weight: 1.0
              product_url: https://www.product.url/12346.pdf
              invoice_url: https://www.invoice.url/12346.pdf
              hs_code: 543111
              made_in_country: CN
    InternationalOrder4.2:
      required:
        - portation
        - service_code
      type: object
      properties:
        portation:
          type: string
          description: |-
            For orders with goods that have been or need to be imported into the country, whether by a forwarder or by Ninja Van, set `Import` as the portation type.

            For orders that require goods to be exported by Ninja Van to another country, set `Export` as the portation type.
          enum:
            - Import
            - Export
          example: Import
        service_code:
          type: string
          description: |-
            A code provided by the Account Manager from Ninja Van.
            International service code will be used by our system to identify which type of lane and which service that will be used for the order.
          example: SGMY0015
      description: Details specific to cross-border shipments.
    ParcelJob4.2:
      required:
        - dimensions
        - delivery_start_date
        - delivery_timeslot
        - is_pickup_required
      type: object
      properties:
        delivery_start_date:
          pattern: '^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$'
          type: string
          description: |-
            Specifies the start date of the delivery period in the `yyyy-MM-dd` format. For example, for standard orders that take 3 days, if the `delivery_start_date` is on `2021-12-15`, the delivery will be attempted at any time from `2021-12-15` to `2021-12-17`.

            The API automatically adjust the date for blocked dates. Double check for the adjusted `delivery_start_date` in response.

            If an order is created before the cutoff time, the API defaults `delivery_start_date` to the same day, if that day is not a blocked date. Otherwise, `delivery_start_date` is defaulted to the next available date.
        delivery_timeslot:
          $ref: "#/components/schemas/DeliveryTimeslotInfo"
        delivery_instructions:
          type: string
          description: Delivery instructions for the driver.
        items:
          maxItems: 200
          type: array
          description: |-
            List of items inside the parcel.

            **Note:** For `International` orders (except for `International B2B Bundle`), at least one item MUST be provided to undergo customs clearance as part of the manifesting process.
          items:
            $ref: "#/components/schemas/Items4.2"
        allow_self_collection:
          type: boolean
          description: |-
            Indicates whether the customer is allowed to self-collect the parcels.
            *Required* if a valid delivery collection point (`to.collection_point`) is specified.
        allow_weekend_delivery:
          type: boolean
          description: Specifies whether deliveries can be attempted on weekends.
          default: true
        cash_on_delivery:
          type: number
          description: Specifies the amount of cash to be collected from the recipient upon delivery, in the currency provided in `cash_on_delivery_currency`.
          format: double
        cash_on_delivery_currency:
          type: string
          description: |-
            Currency for cash on delivery SHOULD be explicitly specified. The value must be the destination country's currency following the ISO 4217 representation.

            If not provided, it will default to the currency of the destination country specified in `to.address.country`.
        insured_value:
          type: number
          description: Specifies the desired insured value of the parcel.
          format: double
        insured_value_currency:
          type: string
          description: |-
            Currency for insured value SHOULD be explicitly specified. The value must be the destination country's currency following the ISO 4217 representation.

            If not provided, it will default to the currency of the destination country specified in `to.address.country`.
        dimensions:
          $ref: "#/components/schemas/Dimension"
        is_pickup_required:
          type: boolean
          description: |-
            Indicates whether a pickup reservation is required.
            If set to `true`, the system checks if a pickup reservation exists with the same:
            * `pickup_date`
            * Pickup address (inferred from the `parcel_job.pickup_address` or `from.address`)

            The system creates a new pickup reservation if none exists for the current pickup date and address.

            To update the pickup time slot for a specific pickup reservation, please call Ninja Van's shipper support hotline.

            For more details, refer to the notes for the `pickup_timeslot` field.

            If you require a `Scheduled` pickup, then provide the following fields:
            * `pickup_date`
            * `pickup_timeslot`
            * `pickup_approximate_volume`
          default: false
      discriminator:
        propertyName: is_pickup_required
        mapping:
          "false": "#/components/schemas/NoPickupInfo4.2"
          "true": "#/components/schemas/PickupInfo4.2"
    NoPickupInfo4.2:
      type: object
      allOf:
        - $ref: "#/components/schemas/ParcelJob4.2"
    PickupInfo4.2:
      allOf:
        - $ref: "#/components/schemas/ParcelJob4.2"
        - type: object
          properties:
            pickup_service_type:
              type: string
              description: |-
                Specifies the pickup service type.
              default: Scheduled
            pickup_service_level:
              type: string
              description: |-
                Specifies the pickup service level. You have the option of choosing `Standard` or `Premium` levels.

                Premium pickups have shorter pickup time slots, and the cutoff rules are more relaxed. Check with your Account Manager to see if your account is eligible for Premium pickups.
              default: Standard
              enum:
                - Standard
                - Premium
            pickup_address:
              $ref: "#/components/schemas/NewSender"
            pickup_date:
              pattern: '^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$'
              type: string
              description: |-
                Specifies the date on which the pickup will occur in the `yyyy-MM-dd` format.

                The system will adjust the pickup date automatically to the next available working day, if the specified pickup date:
                * Falls on a blocked date. For example, a public holiday or warehouse closure.
                * Doesn't meet the cutoff time for pickup bookings for that day.

                Any adjustments to the pickup date are returned in the response.
            pickup_timeslot:
              $ref: "#/components/schemas/PickupTimeslotInfo"
            pickup_approximate_volume:
              type: string
              default: Less than 3 Parcels
              enum:
                - Full-Van Load
                - Half-Van Load
                - Larger than Van Load
                - Less than 10 Parcels
                - Less than 3 Parcels
                - Trolley Required
            pickup_instructions:
              type: string
              description: Instruction to driver for pickup attempts.
    Items4.2:
      required:
        - item_description
      type: object
      properties:
        item_description:
          maxLength: 255
          type: string
          description: Description of the item.
          example: Men's Blue T-shirts
        native_item_description:
          maxLength: 255
          type: string
          description: Description of the item in the sender's native language.
          example: 男人衬衫
        quantity:
          minimum: 1
          type: number
          description: Total quantity of the item.
          default: 1
          example: 5
        unit_value:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: |-
            Value of the item in the currency specified in `customs_declaration.goods_currency`.

            **Note:** Unit value MUST be declared for `International` orders (except for `International B2B Bundle`).
          example: 15.99
        unit_weight:
          minimum: 0
          type: number
          description: Weight of the item in kilograms.
          example: 2.3
        hs_code:
          type: integer
          minimum: 0
          description: |-
            Harmonized System (HS) code to determine the type of goods and their associated tax rate.
          example: 543111
        product_url:
          type: string
          description: Product URL of the item. The provided value must be a valid URL.
          example: "https://www.product.url/12345.pdf"
        invoice_url:
          type: string
          description: Invoice URL of the item. The provided value must be a valid URL.
          example: "https://www.invoice.url/12345.pdf"
        made_in_country:
          type: string
          description: An ISO 3166-1 Alpha 2 compliant country code that signifies the country of origin for the item.
        is_dangerous_good:
          type: boolean
          description: Declaration of dangerous goods for air freight.
      description: Details of the items.
    CustomsDeclaration4.2:
      type: object
      required:
        - goods_currency
      properties:
        goods_currency:
          type: string
          description: |-
            Currency for goods value declared in `parcel_job.items[i].unit_value`.

            The value can be either `USD` or the destination currency following the ISO 4217 representation.
          example: USD
        battery_type:
          type: string
          description: |-
            Battery type.
          default: No Battery
          enum:
            - No Battery
            - Lithium Ion Battery
            - Lithium Battery
            - Alkaline Battery
            - Other Battery
          example: No Battery
        battery_packing:
          type: string
          description: |-
            Battery package.
          default: No Battery
          enum:
            - No Battery
            - Battery Only
            - Battery Packed with Equipment
            - Battery Inside Equipment
          example: No Battery
        trade_terms:
          type: string
          description: |-
            A string that represents "international commercial terms" (Incoterms).
          default: DDP
          enum:
            - DDU
            - DDP
          example: DDU
        tax_id:
          type: string
          description: |-
            Consignee's tax number. It SHOULD be provided for reducing the amount of tax charged if the destination country is Indonesia or Vietnam.
        is_gst_included_in_goods_value:
          type: boolean
          description: |-
            By Jan 2023, if the destination country is Singapore, it is required to declare whether `parcel_job.items[i].unit_value` has GST included or not.

            If `is_gst_included_in_goods_value` = `true`, `gst_registration_number` must be provided.
          default: false
        gst_registration_number:
          maxLength: 255
          pattern: "^[A-Za-z0-9]*$"
          type: string
          description: |-
            Goods and Service Tax (GST) registration number.

            At the point of order creation for shipments destined for Singapore, consolidators, forwarders, and aggregators can provide GST registration number for the order.
        lvg_registration_number:
          maxLength: 255
          pattern: "^[A-Za-z0-9]*$"
          type: string
          description: |-
            Low Valuable Goods (LVG) registration number. 

            At the point of order creation for shipments destined for Malaysia, consolidators, forwarders, and aggregators can provide LVG registration number for the order.
      description: General parcel description used for customs declaration. Applies only to `International` orders.
    CustomsDeclarationForB2BBundle:
      allOf:
        - type: object
          required:
            - customs_description
            - goods_value
          properties:
            customs_description:
              type: string
              description: |-
                Description of parcels. For example, Men's T-shirts
            goods_value:
              minimum: 0
              exclusiveMinimum: true
              type: number
              description: |-
                Total value for the order in the currency specified in `customs_declaration.goods_currency`.
            goods_currency:
              type: string
              description: |-
                Currency for goods value declared in `customs_declaration.goods_value`.

                The value can be either `USD` or the destination currency following the ISO 4217 representation.
              example: USD
            hs_code:
              type: string
              description: |-
                Harmonised System code of the parcel SKUs to be shipped
        - $ref: "#/components/schemas/CustomsDeclaration4.2"
    Timezone:
      type: string
      enum:
        - Asia/Singapore
        - Asia/Kuala_Lumpur
        - Asia/Jakarta
        - Asia/Jayapura
        - Asia/Makassar
        - Asia/Bangkok
        - Asia/Manila
        - Asia/Ho_Chi_Minh
        - Asia/Yangon
    Dimension:
      type: object
      properties:
        size:
          type: string
          enum:
            - S
            - M
            - L
            - XL
            - XXL
        weight:
          type: number
          description: "The weight of the parcel, in kilograms (k.g.)."
          format: double
        length:
          type: number
          description: "The length of the parcel, in centimeters (c.m.)."
          format: double
        width:
          type: number
          description: "The width of the parcel, in centimeters (c.m.)."
          format: double
        height:
          type: number
          description: "The height of the parcel, in centimeters (c.m.)."
          format: double
      description: Dimension information of parcels or objects.
    Items:
      required:
        - item_description
      type: object
      properties:
        item_description:
          maxLength: 255
          type: string
          description: The description of the item.
        quantity:
          type: number
          description: Total quantity of the item.
        is_dangerous_good:
          type: boolean
          description: Declaration of dangerous goods for air freight.
      description: Details of the items.
    PickupBooking:
      allOf:
        - $ref: "#/components/schemas/NewPickupBooking"
    NewPickupBooking:
      type: object
      properties:
        pickup_service_type:
          type: string
          description: |-
            Specifies the pickup service type.
          default: Scheduled
        pickup_service_level:
          type: string
          description: |-
            Specifies the pickup service level. You have the option of choosing `Standard` or `Premium` levels.

            Premium pickups have shorter pickup time slots, and the cutoff rules are more relaxed. Check with your Account Manager to see if your account is eligible for Premium pickups.
          default: Standard
          enum:
            - Standard
            - Premium
        pickup_date:
          pattern: '^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$'
          type: string
          description: |-
            Specifies the date on which the pickup will occur in the `yyyy-MM-dd` format.

            The system will adjust the pickup date automatically to the next available working day, if the specified pickup date:
            * Falls on a blocked date. For example, a public holiday or warehouse closure.
            * Doesn't meet the cutoff time for pickup bookings for that day.

            Any adjustments to the pickup date are returned in the response.
        pickup_timeslot:
          $ref: "#/components/schemas/PickupTimeslotInfo"
        pickup_instructions:
          type: string
        pickup_approximate_volume:
          type: string
          enum:
            - Full-Van Load
            - Half-Van Load
            - Larger than Van Load
            - Less than 10 Parcels
            - Less than 3 Parcels
            - Trolley Required
        pickup_address:
          $ref: "#/components/schemas/NewSender"
        reference:
          type: object
          properties:
            merchant_pickup_booking_number:
              maxLength: 255
              type: string
              description: Identifier of the pickup booking in shipper's systems.
          description: "Reference information. This information returns to the shipper via webhooks, and can be used as query parameters when retrieving orders from the our API."
      example:
        pickup_address:
          name: John Doe
          phone_number: "+60138201527"
          email: john.doe@gmail.com
          address:
            address1: 17 Lorong Jambu 3
            address2: ""
            area: Taman Sri Delima
            city: Simpang Ampat
            state: Pulau Pinang
            country: MY
            postcode: "51200"
        pickup_service_type: Scheduled
        pickup_service_level: Standard
        pickup_date: "2021-12-15"
        pickup_timeslot:
          start_time: "09:00"
          end_time: "12:00"
          timezone: Asia/Kuala_Lumpur
        pickup_instructions: Pickup with care!
        pickup_approximate_volume: Less than 3 Parcels
        reference:
          merchant_pickup_booking_number: Pickup-123456
    AccessTokenGrantRequest:
      required:
        - client_id
        - client_secret
        - grant_type
      type: object
      properties:
        client_id:
          type: string
          description: Client ID from your Ninja Dashboard account.
        client_secret:
          type: string
          description: Client Key from your Ninja Dashboard account.
        grant_type:
          type: string
          enum:
            - client_credentials
    AccessTokenGrantResponse:
      required:
        - access_token
        - expires
        - expires_in
        - token_type
      type: object
      properties:
        access_token:
          type: string
          description: Bearer token to be included in the `Authorization` HTTP header for all API requests.
        expires:
          minimum: 1
          type: integer
          description: The epoch timestamp at which the access token expires.
          format: int32
        expires_in:
          minimum: 300
          type: integer
          description: The number of seconds at which the access token expires.
          format: int32
        token_type:
          type: string
          enum:
            - bearer
    ErrorResponse:
      required:
        - error
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
    Error:
      required:
        - request_id
      type: object
      properties:
        code:
          type: string
          description: Internal error reference code.
        request_id:
          type: string
          description: Request identifier for error tracking.
        title:
          type: string
          description: Frontend-friendly error title.
        message:
          type: string
          description: Frontend-friendly error message.
        details:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
    ErrorDetail:
      required:
        - field
        - message
        - reason
      type: object
      properties:
        reason:
          type: string
        field:
          type: string
        message:
          type: string
    CancelOrderResponse:
      type: object
      properties:
        trackingId:
          type: string
          description: Tracking ID of the order that was cancelled.
        status:
          type: string
          description: Status of the order.
        updatedAt:
          type: string
          description: Date on which the order was cancelled.
          format: datetime
    OpeningTime:
      type: object
      properties:
        day_of_week:
          description: Number of the day starting from "1" for Monday.
          type: integer
          example: "1"
        end_time:
          description: Time at which the Ninja Point closes.
          type: string
          example: "22:00:00"
        start_time:
          description: Time at which the Ninja Point opens for business.
          type: string
          example: "07:00:00"
    DistributionPointV2:
      type: object
      properties:
        address_1:
          description: Unit and block of the Ninja Point's address.
          type: string
          example: "#01-19/20/21 Clifford Centre"
        address_2:
          description: Street address of the Ninja Point.
          type: string
          example: "24 Raffles Place"
        allow_create_pack:
          description: Flag to indicate if the Ninja Point allows "pack" parcel creation.
          type: boolean
          example: false
        allow_create_post:
          description: Flag to indicate if the Ninja Point allows "post" parcel creation.
          type: boolean
          example: false
        allow_customer_return:
          description: Flag to indicate if the Ninja Point allows customer returns.
          type: boolean
          example: false
        allow_shipper_send:
          description: Flag to indicate if the Ninja Point allows shippers to drop-off "send" parcels.
          type: boolean
          example: false
        can_customer_collect:
          description: Flag to indicate if the Ninja Point allows customer collection.
          type: boolean
          example: true
        directions:
          description: Additional description on how to find the Ninja Point.
          type: string
          example: Next to Setish Boutique
        distance:
          description: N/A
          type: number
        dpms_id:
          description: Legacy Ninja Point identifier.
          type: number
          example: 1337
        floor_number:
          description: Floor number of the Ninja Point's address.
          type: string
          example: "01"
        id:
          description: Ninja Van's identifier for the Ninja Point.
          type: integer
          example: 118
        latitude:
          description: Latitude of the Ninja Point's location.
          type: number
          example: 3.009829
        longitude:
          description: Longitude of the Ninja Point's location.
          type: number
          example: 102.770408
        max_parcel_stay_duration:
          description: Maximum number of days a parcel can stay at the Ninja Point.
          type: number
          example: 3
        name:
          description: >
            Descriptive names of the locations easily understood by customers, to be used in the selection dropdown list.
          type: string
          example: "Mr Fix at Bukit Merah Central"
        opening_hours:
          description: Details of the Ninja Point's opening hours.
          type: array
          items:
            $ref: "#/components/schemas/OpeningTime"
        accepted_parcel_sizes:
          description: >
            Accepted parcel sizes for shipper drop-offs at Ninja Points (excluding customer collection service).
          type: array
          items:
            type: string
            enum:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - EXTRALARGE
              - XXLARGE
          example: ["XSMALL", "SMALL"]
        packs_sold_here:
          description: Flag to indicate if Ninja Packs are available for purchase at the Ninja Point.
          type: boolean
          example:
            - true
        partner_id:
          description: Ninja Point partner's identifier.
          type: number
          example: 123
        partner_name:
          description: Ninja Point partner's name.
          type: string
          example: "Antoni's Cafe"
        postal_code:
          description: Postal code of the Ninja Point's address.
          type: string
          example: "678265"
        short_name:
          description: Identifier used by the order creation endpoint to map to the Ninja Point.
          type: string
          example: "IS_UNS"
        type:
          description: Type of the Ninja Point.
          type: string
          enum:
            - BOX
            - SHOP
        unit_number:
          description: Unit number of the Ninja Point's address.
          type: string
          example: "123"
    DistributionPointV2.1:
      type: object
      properties:
        address_1:
          description: Unit and block of the Ninja Point's address.
          type: string
          example: "#01-19/20/21 Clifford Centre"
        address_2:
          description: Street address of the Ninja Point.
          type: string
          example: "24 Raffles Place"
        allow_create_pack:
          description: Flag to indicate if the Ninja Point allows "pack" parcel creation.
          type: boolean
          example: false
        allow_create_post:
          description: Flag to indicate if the Ninja Point allows "post" parcel creation.
          type: boolean
          example: false
        allow_customer_return:
          description: Flag to indicate if the Ninja Point allows customer returns.
          type: boolean
          example: false
        allow_shipper_send:
          description: Flag to indicate if the Ninja Point allows shippers to drop-off "send" parcels.
          type: boolean
          example: false
        can_customer_collect:
          description: Flag to indicate if the Ninja Point allows customer collection.
          type: boolean
          example: true
        directions:
          description: Additional description on how to find the Ninja Point.
          type: string
          example: Next to Setish Boutique
        distance:
          description: N/A
          type: number
        floor_number:
          description: Floor number of the Ninja Point's address.
          type: string
          example: "01"
        latitude:
          description: Latitude of the Ninja Point's location.
          type: number
          example: 3.009829
        longitude:
          description: Longitude of the Ninja Point's location.
          type: number
          example: 102.770408
        max_parcel_stay_duration:
          description: Maximum number of days a parcel can stay at the Ninja Point.
          type: number
          example: 3
        name:
          description: >
            Descriptive names of the locations easily understood by customers, to be used in the selection dropdown list.
          type: string
          example: "Mr Fix at Bukit Merah Central"
        opening_hours:
          description: Details of the Ninja Point's opening hours.
          type: array
          items:
            $ref: "#/components/schemas/OpeningTime"
        accepted_parcel_sizes:
          description: >
            Accepted parcel sizes for shipper drop-offs at Ninja Points (excluding customer collection service).
          type: array
          items:
            type: string
            enum:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - EXTRALARGE
              - XXLARGE
          example: [ "XSMALL", "SMALL" ]
        packs_sold_here:
          description: Flag to indicate if Ninja Packs are available for purchase at the Ninja Point.
          type: boolean
          example:
            - true
        partner_name:
          description: Ninja Point partner's name.
          type: string
          example: "Antoni's Cafe"
        postal_code:
          description: Postal code of the Ninja Point's address.
          type: string
          example: "678265"
        short_name:
          description: Identifier used by the order creation endpoint to map to the Ninja Point.
          type: string
          example: "IS_UNS"
        type:
          description: Type of the Ninja Point.
          type: string
          enum:
            - BOX
            - SHOP
        unit_number:
          description: Unit number of the Ninja Point's address.
          type: string
          example: "123"
    SendParcelScanResponse:
      required:
        - tracking_id
        - type
        - status
        - granular_status
      type: object
      properties:
        tracking_id:
          type: string
          description: "Tracking ID of the parcel"
        type:
          type: string
          description: "Type of parcel (Normal | Return)"
        status:
          type: string
          description: "Identifies the major milestone for where an order is in the parcel life cycle"
        granular_status:
          type: string
          description: "Identify more detailed transitions inside the status"
      example:
        tracking_id: NVSGBEDBP03784ADPL
        type: Normal
        status: Completed
        granular_status: Completed
    SendWebhookRequest:
      required:
        - store
        - received_at
        - tracking_ids
      type: object
      properties:
        store:
          type: string
          description: External store ID.
        received_at:
          type: string
          description: Date and time when the parcel is dropped off at the Ninja Point (yyyy-MM-dd HH:mm:ss in UTC).
        tracking_ids:
          type: array
          description: List of tracking IDs to be dropped off.
          items:
            type: string
      example:
        store: PSVKV4M16A
        received_at: 2022-06-01 00:00:00
        tracking_ids: ["NVSGBEDBP12345ADPL", "NVSGBEDBP03784ADPL"]
    SendWebhookResponse:
      required:
        - success
        - error
        - vendor_code
        - store
      type: object
      properties:
        success:
          type: array
          description: List of parcels that were dropped off.
          items:
            $ref: "#/components/schemas/SendWebhookSuccess"
        error:
          type: array
          description: List of tracking IDs that weren't successfully dropped off.
          items:
            type: string
        vendor_code:
          type: string
          description: Unique identifier used by the partner for integration.
        store:
          type: string
          description: External store ID.
      example:
        success:
          [
            {
              "tracking_id": "NVSGBEDBP03784ADPL",
              "job_number": 123,
              "pin": 239812,
            },
          ]
        error: ["NVSGBEDBP12345ADPL"]
        vendor_code: NV
        store: PSVKV4M16A
    SendWebhookSuccess:
      required:
        - tracking_id
        - job_number
        - pin
      type: object
      properties:
        tracking_id:
          type: string
          description: Tracking ID of the parcel.
        job_number:
          type: integer
          description: Ninja Van job number to which the parcel is added.
        pin:
          type: string
          description: Unlock code used by the driver during the parcel handover.
      example:
        tracking_id: NVSGBEDBP03784ADPL
        job_number: 123
        pin: 239812
    DpOrderEventRequest:
      required:
        - tracking_id
        - store_id
      type: object
      properties:
        tracking_id:
          type: string
          description: Tracking ID of the parcel.
        store_id:
          type: string
          description: External store ID.
        received_at:
          type: string
          description: Date and time when the store received the parcel from the driver (yyyy-MM-dd HH:mm:ss in UTC).
        released_at:
          type: string
          description: Date and time when the store released the parcel to the driver or customer (yyyy-MM-dd HH:mm:ss in UTC).
        customer_unlock_code:
          type: string
          description: Code used by the customer to collect the parcel.
    PriceEstimate:
      required:
        - service_level
        - from
        - to
      type: object
      properties:
        weight:
          type: number
          description: Weight of the parcel, in kilograms (k.g.). If a value is not provided or zero is provided, the price will be estimated based on 1 kg instead.
          format: double
        service_level:
          $ref: "#/components/schemas/ServiceLevel"
        from:
          type: object
          description: Zone codes for the origin of the order.
          allOf:
            - $ref: "#/components/schemas/BillingZone"
        to:
          type: object
          description: Zone codes for the destination of the order.
          allOf:
            - $ref: "#/components/schemas/BillingZone"
    BillingZone:
      required:
        - l1_tier_code
        - l2_tier_code
      type: object
      properties:
        l1_tier_code:
          $ref: "#/components/schemas/ZoneTierCode"
        l2_tier_code:
          $ref: "#/components/schemas/ZoneTierCode"
    BillingZoneName:
      required:
        - l1_name
        - l2_name
        - l3_name
      type: object
      properties:
        l1_name:
          $ref: "#/components/schemas/ZoneTierCode"
        l2_name:
          $ref: "#/components/schemas/ZoneTierCode"
        l3_name:
          $ref: "#/components/schemas/ZoneTierCode"
    ZoneTierCode:
      type: string
      description: Refer to [Zone code mapping](#tag/Reference/Zone-code-mapping)
    SingleTrackingNumberResponse:
      $ref: "#/components/schemas/TrackingEvent"
    MultipleTrackingNumbersResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TrackingEvent"
          example:
            - tracking_number: NVSG01NFD000000001
              is_full_history_available: true
              events:
                - shipper_id: 100001
                  tracking_number: NVSG01NFD000000001
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:22:48+0000
                  status: Pending Pickup
                  is_parcel_on_rts_leg: false
                - shipper_id: 100001
                  tracking_number: NVSG01NFD000000001
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:20+0000
                  status: Arrived at Origin Hub
                  is_parcel_on_rts_leg: false
                  comments: SG-BUKIT TIMAH-Zone
                - shipper_id: 100001
                  tracking_number: NVSG01NFD000000001
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:40+0000
                  status: Delivered
                  is_parcel_on_rts_leg: false
                - shipper_id: 100001
                  tracking_number: NVSG01NFD000000001
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:40+0000
                  status: Delivered, Received by Customer
                  is_parcel_on_rts_leg: false
            - tracking_number: NVSG01NFD000000002
              is_full_history_available: true
              events:
                - shipper_id: 100002
                  tracking_number: NVSG01NFD000000002
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:22:48+0000
                  status: Pending Pickup
                  is_parcel_on_rts_leg: false
                - shipper_id: 100002
                  tracking_number: NVSG01NFD000000002
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:20+0000
                  status: Arrived at Origin Hub
                  is_parcel_on_rts_leg: false
                  arrived_at_origin_hub_information:
                    country: Sg
                    city: Marsiling
                    hub: Express
                - shipper_id: 100002
                  tracking_number: NVSG01NFD000000002
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:40+0000
                  status: Delivered
                  is_parcel_on_rts_leg: false
                - shipper_id: 100002
                  tracking_number: NVSG01NFD000000002
                  shipper_order_ref_no: NVQA-NFD
                  timestamp: 2021-12-15T06:23:40+0000
                  status: Delivered, Received by Customer
                  is_parcel_on_rts_leg: false
    arrived_at_transit_hub_information:
      description: Information of the transit hub.
      type: object
      properties:
        country:
          type: string
          description: Country of the transit hub.
        city:
          type: string
          description: City of the transit hub.
        hub:
          type: string
          description: Name of the transit hub.
    in_transit_to_next_sorting_hub_information:
      description: Information of the transit hub.
      type: object
      properties:
        country:
          type: string
          description: Country of the transit hub.
        city:
          type: string
          description: City of the transit hub.
        hub:
          type: string
          description: Name of the transit hub.
    arrived_at_destination_hub_information:
      description: Information of the destination hub.
      type: object
      properties:
        country:
          type: string
          description: Country of the destination hub.
        city:
          type: string
          description: City of the destination hub.
        hub:
          type: string
          description: Name of the destination hub.
    TrackingEvent:
      type: object
      required:
        - tracking_number
        - is_full_history_available
        - events
      description: Details of the tracking events.
      properties:
        tracking_number:
          type: string
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
        is_full_history_available:
          type: boolean
          description: Determine if full events are available for the tracking number provided.
        events:
          $ref: "#/components/schemas/Event"
      example:
        tracking_number: NVSG01NFD000000001
        is_full_history_available: true
        events:
          - shipper_id: 100001
            tracking_number: NVSG01NFD000000001
            shipper_order_ref_no: NVQA-NFD
            timestamp: 2021-12-15T06:22:48+0000
            status: Pending Pickup
            is_parcel_on_rts_leg: false
          - shipper_id: 100001
            tracking_number: NVSG01NFD000000001
            shipper_order_ref_no: NVQA-NFD
            timestamp: 2021-12-15T06:23:20+0000
            status: Arrived at Origin Hub
            is_parcel_on_rts_leg: false
            comments: SG-BUKIT TIMAH-Zone
          - shipper_id: 100001
            tracking_number: NVSG01NFD000000001
            shipper_order_ref_no: NVQA-NFD
            timestamp: 2021-12-15T06:23:40+0000
            status: Delivered
            is_parcel_on_rts_leg: false
          - shipper_id: 100001
            tracking_number: NVSG01NFD000000001
            shipper_order_ref_no: NVQA-NFD
            timestamp: 2021-12-15T06:23:40+0000
            status: Delivered, Received by Customer
            is_parcel_on_rts_leg: false
    Event:
      type: array
      items:
        type: object
        required:
          - shipper_id
          - tracking_number
          - shipper_order_ref_no
          - status
          - timestamp
          - is_parcel_on_rts_leg
        properties:
          shipper_id:
            type: string
            description: Identifier of the shipper.
          tracking_number:
            type: string
            description: Identifier of the order.
          shipper_order_ref_no:
            type: string
            description: Identifier of the order in shipper's systems.
          timestamp:
            type: string
            description: Timestamp of the event.
          status:
            type: string
            description: Status of the order.
          is_parcel_on_rts_leg:
            type: boolean
            description: Determine if it is a return parcel.
          WebhookV1HubLocation:
            type: string
            description: Country, city and shortname of the inbounded hub.
            pattern: "<hub_country>-<hub_city>-<hub_short_name>"
          WebhookV2HubLocation:
            description: Location of the hub for the respective status.
            oneOf:
              - $ref: "#/components/schemas/arrived_at_transit_hub_information"
              - $ref: "#/components/schemas/in_transit_to_next_sorting_hub_information"
              - $ref: "#/components/schemas/arrived_at_destination_hub_information"
      description: "Events information."
    OAuthTokenRequest:
      type: object
      required:
        - client_id
        - client_secret
        - grant_type
      properties:
        client_id:
          type: string
          description: Client ID from Ninja Van.
        client_secret:
          type: string
          description: Client Key from Ninja Van.
        grant_type:
          type: string
          description: |-
            Use `authorization_code` when first generating the access token, then `code` is required. 

            Use `refresh_token` to refresh the access token, then `refresh_token` is required.
          enum:
            - authorization_code
            - refresh_token
        code:
          type: string
          description: Code received in the URL parameter.
        refresh_token:
          type: string
          description: Refresh token received from the API to generate the access token.

    OAuthTokenResponse:
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
      type: object
      properties:
        access_token:
          type: string
          description: Bearer token to be included in the `Authorization` HTTP header for all API requests.
        expires_in:
          minimum: 1
          type: integer
          description: The number of seconds at which the access token expires.
          format: int32
        refresh_token:
          type: string
          description: Refresh token to be included in the request body for refreshing access token.
        token_type:
          type: string
          enum:
            - bearer
    OrderCreateResponseSuccess:
      type: object
      properties:
        requested_tracking_number:
          minLength: 9
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
          type: string
          description: |-
            The requested tracking number of the order.
        tracking_number:
          pattern: "^([a-zA-Z0-9]+[-])*[a-zA-Z0-9]+$"
          type: string
        service_type:
          $ref: "#/components/schemas/ServiceType"
        service_level:
          $ref: "#/components/schemas/ServiceLevel"
        reference:
          type: object
          properties:
            merchant_order_number:
              maxLength: 255
              type: string
              description: Identifier of the order in shipper's systems.
          description: "Reference information."
        from:
          type: object
          description: |-
            Sender's information.
          allOf:
            - $ref: "#/components/schemas/NewSender"
        to:
          type: object
          description: |-
            Recipient's information.
          allOf:
            - $ref: "#/components/schemas/NewRecipient"
        parcel_job:
          type: object
          description: |-
            Details of the parcel's pickup and delivery jobs.
          allOf:
            - $ref: "#/components/schemas/ParcelJob"
        bundle_information:
          type: object
          description: |-
            Details of the created order bundle. This is only returned if service type is `B2B Bundle`
          properties:
            pieces:
              type: array
              description: |-
                Information of the individual pieces created in the bundle. Please note that this array contains the individual piece's tracking number which is used for AWB API and for webhooks.
              items:
                type: object
                properties:
                  tracking_number:
                    type: string
                    description: Tracking number of each piece.
          allOf:
            - $ref: "#/components/schemas/BundleOrder"
        b2b:
          type: object
          description: |-
            Details of the created order B2B information. This is only returned if service type is `B2B Bundle`
          allOf:
            - $ref: "#/components/schemas/B2BOrder"
      example:
        requested_tracking_number: 1234-56789
        tracking_number: PREFIX1234-56789
        service_type: Parcel
        service_level: Standard
        reference:
          merchant_order_number: SHIP-1234-56789
        from:
          name: John Doe
          phone_number: "+60138201527"
          email: john.doe@gmail.com
          address:
            address1: 17 Lorong Jambu 3
            address2: ""
            area: Taman Sri Delima
            city: Simpang Ampat
            state: Pulau Pinang
            address_type: office
            country: MY
            postcode: "51200"
        to:
          name: Jane Doe
          phone_number: "+60103067174"
          email: jane.doe@gmail.com
          address:
            address1: Jalan PJU 8/8
            address2: ""
            area: Damansara Perdana
            city: Petaling Jaya
            state: Selangor
            address_type: home
            country: MY
            postcode: "47820"
        parcel_job:
          is_pickup_required: true
          pickup_service_type: Scheduled
          pickup_service_level: Standard
          pickup_date: "2021-12-15"
          pickup_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Kuala_Lumpur
          pickup_approximate_volume: Less than 3 Parcels
          pickup_instructions: Pickup with care!
          delivery_start_date: "2021-12-16"
          delivery_timeslot:
            start_time: "09:00"
            end_time: "12:00"
            timezone: Asia/Kuala_Lumpur
          delivery_instructions: "If recipient is not around, leave parcel in power riser."
          allow_weekend_delivery: true
          dimensions:
            weight: 1.5
          items:
            - item_description: Sample description
              quantity: 1
              is_dangerous_good: false
    ShipperSettingResponse:
      type: object
      properties:
        order_create:
          type: object
          description: Shipper settings related to order creation.
          properties:
            available_service_types:
              type: array
              description: Type of service enrolled.
              items:
                type: string
            available_service_levels:
              type: array
              description: Shipment service level enrolled.
              items:
                type: string
            is_pre_paid:
              type: boolean
              description: Indicaties whether is a prepaid shipper.
            allow_cod_service:
              type: boolean
              description: Indicates whether the customer is allowed to use cash on delivery service.
            tracking_type:
              type: string
              description: Type of tracking number format.
              enum:
                - Fixed
                - Dynamic
                - MultiFixed
                - MultiDynamic
                - NinjaFixed
                - Prefixless
            prefix:
              type: string
              description: Prefix set for the shipper.
            prefixes:
              type: array
              description: List of prefixes set for the shipper.
        pickup:
          type: object
          description: Shipper settings related to pickup.
          properties:
            services:
              type: array
              description: List of pickup service settings.
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: Pickup service type enrolled.
                  level:
                    type: string
                    description: Pickup service level enrolled.
      example:
        - available_service_types: ["Parcel", "Return"]
          available_service_levels: ["Standard"]
          is_pre_paid: false
          allow_cod_service: true
          tracking_type: "Fixed"
          prefix: "EFLJ1"
          prefixes: ["EFLJ1", "EFLJ2", "EFLJ3"]
          pickup:
            services:
              - type: "Scheduled"
                level: "Standard"
              - type: "Scheduled"
                level: "Premium"

    WebhookV2Subscription:
      type: object
      description: Webhook V2 subscription details
      required:
        - event
        - uri
        - version
      properties:
        event:
          type: string
          description: Event subscribed - must be a webhook V2 event
        uri:
          type: string
          description: URI endpoint to send webhook to
        version:
          type: string
          description: Must be set to "2.0"
        protocol:
          type: string
          description: Protocol used - should be HTTP
        method:
          type: string
          description: HTTP method used to send webhook
      example:
        event: "Delivered, Received by Customer"
        uri: "https://webhook-subscription-endpoint.com"
        version: "2.0"

    WebhookV2SubscriptionResponse:
      type: object
      description: Webhook V2 subscription details
      allOf:
        - properties:
            id:
              type: string
              description: UUID of the subscription
            shipper_id:
              type: integer
              description: Shipper ID of the event subscribed.
        - $ref: "#/components/schemas/WebhookV2Subscription"
      example:
        id: "72ce5313-c0a0-4cd7-8e63-7098c29c569c"
        shipper_id: 123456
        event: "Delivered, Received by Customer"
        protocol: "HTTP"
        method: "POST"
        uri: "https://webhook-subscription-endpoint.com"

    WebhookV2SubscriptionResponseArray:
      type: array
      description: List of webhook V2 subscription details
      items:
        $ref: "#/components/schemas/WebhookV2SubscriptionResponse"
      example:
        - id: "72ce5313-c0a0-4cd7-8e63-7098c29c569c"
          shipper_id: 123456
          event: "Delivered, Received by Customer"
          version: "2.0"
          protocol: "HTTP"
          method: "POST"
          uri: "https://webhook-subscription-endpoint.com"
        - id: "81ce5319-c0a0-4cd7-8e63-9128c29c569c"
          shipper_id: 123456
          event: "Pending Pickup"
          version: "2.0"
          protocol: "HTTP"
          method: "POST"
          uri: "https://webhook-subscription-endpoint.com"

    EventSubscription:
      type: object
      description: Event subscription details.
      properties:
        event:
          type: string
          description: Event subscribed.
        version:
          type: string
          description: Version of the event subscribed.
        internal:
          type: boolean
          default: false
          description: Specifies whether is an internal event subscription.
        protocol:
          type: string
          description: Protocol of the event subscribed.
        method:
          type: string
          description: HTTP method of the event subscribed.
        uri:
          type: string
          description: URI of the event subscribed.
        enable_custom_webhook:
          type: boolean
          default: false
          description: Specifies whether a custom webhook is enabled.
        transformer_class:
          type: string
          description: Specifies custom transformer class used when `enable_custom_webhook` is `true`.
        hooks_enabled:
          type: boolean
          default: false
          description: Specifies whether is a custom webhook hook is enabled. Newer version of `enable_custom_webhook`.
        on_request_generate_hook:
          type: string
          description: Specifies custom on request generate hook used when `hooks_enabled` is `true`.
        on_response_received_hook:
          type: string
          description: Specifies custom on response received hook used when `hooks_enabled` is `true`.

    EventSubscriptionResponse:
      type: array
      description: List of event subscriptions.
      allOf:
        - properties:
            id:
              type: integer
              description: ID of the event subscribed.
            shipper_id:
              type: integer
              description: Shipper ID of the event subscribed.
        - $ref: "#/components/schemas/EventSubscription"
      example:
        - id: 1
          shipper_id: 123
          event: "Pending Pickup"
          version: "1.2"
          internal: false
          protocol: "HTTP"
          method: "POST"
          uri: "https://webhook-subscription-endpoint.com"
          enable_custom_webhook: false
          hooks_enabled: false
          transformer_class: ""
          on_request_generate_hook: ""
          on_response_received_hook: ""

    EventSubscriptionRequest:
      $ref: "#/components/schemas/EventSubscription"
      example:
        - event: "Pending Pickup"
          version: "1.2"
          internal: false
          protocol: "HTTP"
          method: "POST"
          uri: "https://webhook-subscription-endpoint.com"
          enable_custom_webhook: false
          hooks_enabled: false
