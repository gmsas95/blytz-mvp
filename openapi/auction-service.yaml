openapi: 3.1.0
info:
  title: Blytz Auction Service
  version: "1.0.0"
  description: Handles creation, bidding, and management of auctions.
servers:
  - url: /api/v1
paths:
  /auctions:
    get:
      summary: List all auctions
      tags:
        - Auctions
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [scheduled, active, ended, cancelled]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of auctions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionsResponse'
    post:
      summary: Create a new auction
      tags:
        - Auctions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuctionRequest'
      responses:
        '201':
          description: Auction created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionResponse'
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auctions/{auctionId}:
    get:
      summary: Get a specific auction by ID
      tags:
        - Auctions
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Auction details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionResponse'
        '404':
          description: Auction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an auction
      tags:
        - Auctions
      security:
        - bearerAuth: []
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuctionRequest'
      responses:
        '200':
          description: Auction updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionResponse'
        '401':
          description: Unauthorized.
        '404':
          description: Auction not found.
    delete:
      summary: Delete an auction
      tags:
        - Auctions
      security:
        - bearerAuth: []
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Auction deleted successfully.
        '401':
          description: Unauthorized.
        '404':
          description: Auction not found.

  /auctions/{auctionId}/bids:
    get:
      summary: Get all bids for an auction
      tags:
        - Bids
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of bids for the auction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidsResponse'
        '404':
          description: Auction not found.
    post:
      summary: Place a bid on an auction
      tags:
        - Bids
      security:
        - bearerAuth: []
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceBidRequest'
      responses:
        '201':
          description: Bid placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
        '400':
          description: Invalid bid (e.g., too low).
        '401':
          description: Unauthorized.

components:
  schemas:
    Auction:
      type: object
      properties:
        auction_id: { type: string }
        product_id: { type: string }
        seller_id: { type: string }
        title: { type: string }
        description: { type: string }
        starting_price: { type: number, format: double }
        current_price: { type: number, format: double }
        reserve_price: { type: number, format: double }
        min_bid_increment: { type: number, format: double }
        start_time: { type: string, format: date-time }
        end_time: { type: string, format: date-time }
        status: { type: string, enum: [scheduled, active, ended, cancelled] }
        type: { type: string, enum: [live, scheduled] }
    Bid:
      type: object
      properties:
        bid_id: { type: string }
        auction_id: { type: string }
        bidder_id: { type: string }
        amount: { type: number, format: double }
        is_winning: { type: boolean }
        bid_time: { type: string, format: date-time }
    CreateAuctionRequest:
      type: object
      properties:
        product_id: { type: string }
        title: { type: string }
        description: { type: string }
        starting_price: { type: number, format: double }
        reserve_price: { type: number, format: double }
        min_bid_increment: { type: number, format: double }
        start_time: { type: string, format: date-time }
        end_time: { type: string, format: date-time }
        type: { type: string, enum: [live, scheduled] }
        images: { type: array, items: { type: string, format: uri } }
    UpdateAuctionRequest:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        reserve_price: { type: number, format: double }
        min_bid_increment: { type: number, format: double }
        start_time: { type: string, format: date-time }
        end_time: { type: string, format: date-time }
        images: { type: array, items: { type: string, format: uri } }
    PlaceBidRequest:
      type: object
      required: [amount]
      properties:
        amount: { type: number, format: double }
    AuctionResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          $ref: '#/components/schemas/Auction'
    AuctionsResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            auctions:
              type: array
              items:
                $ref: '#/components/schemas/Auction'
            total: { type: integer, format: int64 }
            page: { type: integer }
            limit: { type: integer }
    BidResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          $ref: '#/components/schemas/Bid'
    BidsResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "INVALID_REQUEST"
        message:
          type: string
          example: "The request data was invalid."
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT