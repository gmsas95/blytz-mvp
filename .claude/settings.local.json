{
  "permissions": {
    "allow": [
      "Read(//home/sas/**)",
      "Bash(tree:*)",
      "Bash(chmod:*)",
      "Bash(./scaffold.sh:*)",
      "Bash(pkill:*)",
      "Bash(./create-microservices.sh:*)",
      "Bash(go mod tidy:*)",
      "Bash(sudo rm:*)",
      "Bash(sudo tar:*)",
      "Bash(~/go/go/bin/go mod tidy:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nInitial commit: Blytz Live Auction MVP\n\n- Complete project structure with Docker-based microservices\n- Go auction service with Redis backend\n- Nginx API gateway configuration\n- Firebase cloud functions setup\n- Infrastructure and deployment configurations\n- OpenAPI specifications\n- Development documentation and CLAUDE.md\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(find:*)",
      "Bash(export:*)",
      "Bash(docker build:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(curl:*)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(for port in 8081 8082 8083)",
      "Bash(do echo -n \"Port $port: \")",
      "Bash(done)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git ls-tree:*)",
      "Bash(mkdir:*)",
      "Bash(make:*)",
      "Bash(./scripts/local-ci.sh:*)",
      "Bash(go build:*)",
      "Bash(for port in 8081 8082 8083 8084 8085 8086 8087)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(for service in auth-service product-service auction-service gateway order-service payment-service chat-service logistics-service)",
      "Bash(do echo \"=== $service ===\")",
      "Bash(ls:*)",
      "Bash(go get:*)",
      "Bash(gh run watch:*)",
      "Bash(do echo \"=== Testing $service ===\")",
      "Bash(services=\"auth-service product-service auction-service gateway order-service payment-service chat-service logistics-service\")",
      "Bash(for service in $services)",
      "Bash(awk:*)",
      "Bash(for:*)",
      "Bash(/dev/null)",
      "Bash(do if [ ! -d \"services/$service\" ])",
      "Bash(then echo \"  ‚ùå $service\")",
      "Bash(fi)",
      "Bash(do echo:*)",
      "Bash(echo:*)",
      "Bash(./fix-go-mods.sh:*)",
      "Bash(go version:*)",
      "Bash(./validate-architecture.sh:*)",
      "Bash(/home/sas/blytzmvp-clean/test-microservices.sh:*)",
      "Bash(if [ -f \"services/$service/internal/api/router.go\" ])",
      "Bash([:*)",
      "Bash(then echo \"  ‚úÖ Has API routing structure\")",
      "Bash(else echo \"  ‚ö†Ô∏è  API structure unclear\")",
      "Bash(if grep -q \"Redis\\|redis\" services/$service/internal/*/*.go)",
      "Bash(then echo \"  ‚úÖ Redis integration present\")",
      "Bash(else echo \"  ‚ö†Ô∏è  Redis integration unclear\")",
      "Bash(if grep -q \"auction\\|bid\\|product\\|auth\" services/$service/cmd/main.go)",
      "Bash(then echo \"  ‚úÖ Core functionality implemented\")",
      "Bash(else echo \"  ‚ö†Ô∏è  Core functionality unclear\")",
      "Bash(firebase init:*)",
      "Bash(npm install)",
      "Bash(npm run build)",
      "Bash(./setup-firebase-local.sh:*)",
      "Bash(firebase emulators:start:*)",
      "Bash(firebase projects:list:*)",
      "Bash(firebase use:*)",
      "Bash(npm install:*)",
      "Bash(npm audit)",
      "Bash(npm audit:*)",
      "Bash(./tests/integration/test-auction-flow.sh:*)",
      "Bash(timeout:*)",
      "Bash(firebase functions:list:*)",
      "Bash(./tests/integration/final_test.sh)",
      "Bash(./tests/integration/simple_test.sh)",
      "Bash(go mod init:*)",
      "Bash(/home/sas/blytzmvp-clean/verify-shared-migration.sh)",
      "Bash(./tests/integration/mvp-final-test.sh:*)",
      "Bash(python3:*)",
      "Bash(./tests/integration/test-persistence-simple.sh:*)",
      "Bash(git checkout:*)",
      "Bash(npm run dev)",
      "Bash(cat:*)",
      "Bash(git reset:*)",
      "Bash(do)",
      "Bash(go test:*)",
      "Bash(npx husky init:*)",
      "Bash(npx husky install:*)",
      "Bash(npm update:*)",
      "Bash(npm run type-check)",
      "Bash(npm run lint:*)",
      "Bash(npm run format:check)",
      "Bash(npm run format:*)",
      "Bash(/home/sas/blytzmvp-clean/frontend/verify-setup.sh:*)",
      "Bash(npm run build:analyze:*)",
      "Bash(npx eslint:*)",
      "Bash(npx playwright install:*)",
      "Bash(sudo npx:*)",
      "Bash(npx playwright test:*)",
      "mcp__playwright__browser_navigate",
      "Bash(npm run test:*)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=0 npx playwright install:*)"
    ],
    "deny": [],
    "ask": []
  }
}
