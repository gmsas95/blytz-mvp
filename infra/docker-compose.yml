version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: blytz-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: blytz
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - blytz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: blytz-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - blytz-network

  auction:
    build:
      context: ../services/auction-service
      dockerfile: Dockerfile
    container_name: blytz-auction
    restart: unless-stopped
    env_file:
      - ../services/auction-service/.env
    depends_on:
      - redis
    ports:
      - "8081:8080"
    networks:
      - blytz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  payment:
    build:
      context: ../services/payment-service
      dockerfile: Dockerfile
    container_name: blytz-payment
    restart: unless-stopped
    env_file:
      - ../services/payment-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      - blytz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  order:
    build:
      context: ../services/order-service
      dockerfile: Dockerfile
    container_name: blytz-order
    restart: unless-stopped
    env_file:
      - ../services/order-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auction:
        condition: service_healthy
      payment:
        condition: service_healthy
    ports:
      - "8083:8083"
    networks:
      - blytz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: blytz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - auction
      - payment
      - order
    networks:
      - blytz-network

  prometheus:
    image: prom/prometheus:latest
    container_name: blytz-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - blytz-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:

networks:
  blytz-network:
    driver: bridge